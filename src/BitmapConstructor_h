#ifndef BITMAPCONSTRUCTOR_H
#define BITMAPCONSTRUCTOR_H

#include <string>
#include "Bitmap.h"
#include "BitmapIterator.h"
#include "SerialBitmapIterator.h"
#include "ParallelBitmapIterator.h"
#include "SerialBitmapConstructor.h"
#include "ParallelBitmapConstructor.h"
#include "Records.h"
using namespace std;

class BitmapConstructor {
  public:
    static Bitmap* construct(char* record, int thread_num = 1, int level = MAX_LEVEL);
    static Bitmap* constructMison(char* record, int num_step = 5, int level = MAX_LEVEL);
    static Bitmap* construct(Records* records, long rec_id, int level = MAX_LEVEL, bool support_array = true);
    static Bitmap* construct(Records* records, long rec_id, int thread_num, int level = MAX_LEVEL, bool support_array = true);
    static Bitmap* constructSbSPisonParallel(Records* records, long rec_id, int thread_num, int level = MAX_LEVEL, int num_step = 5, bool support_array = true);
    static Bitmap* constructMison(Records* records, long rec_id, int num_step = 5, int level = MAX_LEVEL, bool support_array = true);
    static Bitmap* constructMisonPlus(Records* records, long rec_id, int num_step = 5, int level = MAX_LEVEL, bool support_array = true);
    static Bitmap* constructSbSPison(Records* records, long rec_id, int num_step = 5, int level = MAX_LEVEL, bool support_array = true);
    static BitmapIterator* getIterator(Bitmap* bi);
};

#endif
