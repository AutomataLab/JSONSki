#include "SerialBitmap.h"
#include <immintrin.h>

#include <emmintrin.h>
#include <string.h>

#include <sys/time.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <pthread.h>
#include <malloc.h>
#include <sys/time.h>
#include <sys/file.h>
#include <unistd.h>
#include <sched.h>
#include <unordered_map>
//#include "QueryAutomaton.h"
//#include "query_automaton.h"
//#include "lexing.h"
// #include "streaming_automaton.h"

using namespace std;

SerialBitmap::SerialBitmap() {

}

SerialBitmap::SerialBitmap(char* record, int depth, bool array_supported) {
    this->mRecord = record;
    this->mDepth = depth;
    this->mQuoteBitmap = NULL;
    this->mEscapeBitmap = NULL;
    this->mColonBitmap = NULL;
    this->mCommaBitmap = NULL;
    this->mStrBitmap = NULL;
    this->mLbraceBitmap = NULL;
    this->mRbraceBitmap = NULL;
    this->mLbracketBitmap = NULL;
    this->mRbracketBitmap = NULL;
    /*for (int i = 0; i <= depth; ++i) {
        this->mLevColonBitmap[i] = NULL;
        this->mLevCommaBitmap[i] = NULL;
    }
    this->mArraySupported = array_supported;*/
}

void SerialBitmap::freeMemory()
{
    /*for(int m = 0; m <= mDepth; m++){
        if (mLevColonBitmap[m]) {
            free(mLevColonBitmap[m]);
            mLevColonBitmap[m] = NULL;
        }
        if (mLevCommaBitmap[m]) {
            free(mLevCommaBitmap[m]);
            mLevCommaBitmap[m] = NULL;
        }
    }*/
    if (mQuoteBitmap) {
        free(mQuoteBitmap);
        mQuoteBitmap = NULL;
//        cout<<"freed quote bitmap"<<endl;
    }
   // cout<<"quote"<<endl;
    /*if (mEscapeBitmap) {
        free(mEscapeBitmap);
        mEscapeBitmap = NULL;
    }
   // cout<<"escape"<<endl;
    if (mStrBitmap) {
        free(mStrBitmap);
        mStrBitmap = NULL;
    }
   // cout<<"str"<<endl;
    if (mColonBitmap) {
        free(mColonBitmap);
        mColonBitmap = NULL;
    }
   // cout<<"colon"<<endl;
    if (mCommaBitmap) {
        free(mCommaBitmap);
        mCommaBitmap = NULL;
    }
   // cout<<"comma"<<endl;
    if (mLbraceBitmap) {
        free(mLbraceBitmap);
        mLbraceBitmap = NULL;
    }
   // cout<<"left brace"<<endl;
    if (mRbraceBitmap) {
        free(mRbraceBitmap);
        mRbraceBitmap = NULL;
    }
   // cout<<"right brace"<<endl;
    if (mLbracketBitmap) {
        free(mLbracketBitmap);
        mLbracketBitmap = NULL;
    }
   // cout<<"left bracket "<<endl;
    if (mRbracketBitmap) {
        free(mRbracketBitmap);
        mRbracketBitmap = NULL;
    }*/
   // cout<<"right bracket"<<endl;
}

SerialBitmap::~SerialBitmap()
{
    freeMemory();
   /// cout<<"memory released "<<endl;
}

void SerialBitmap::setRecordLength(long length) {
    this->mRecordLength = length;
    this->mNumTmpWords = length / 32;
    this->mNumWords = length / 64;
    //this->mQuoteBitmap = (unsigned long*)malloc((mNumWords) * sizeof(unsigned long));
    // allocate memory space for saving temporary results
    if (!mQuoteBitmap) {
        mQuoteBitmap = (unsigned long*)malloc((mNumWords) * sizeof(unsigned long));
    }
    /*if (!mColonBitmap) {
        mColonBitmap = (unsigned long*)malloc((mNumWords) * sizeof(unsigned long));
    }
    if (!mCommaBitmap) {
        mCommaBitmap = (unsigned long*)malloc((mNumWords) * sizeof(unsigned long));
    }
    if (!mEscapeBitmap) {
        mEscapeBitmap = (unsigned long*)malloc((mNumWords) * sizeof(unsigned long));
    }
    if (!mStrBitmap) {
        mStrBitmap = (unsigned long*)malloc((mNumWords) * sizeof(unsigned long));
    }
    if (!mLbraceBitmap) {
        mLbraceBitmap = (unsigned long*)malloc((mNumWords) * sizeof(unsigned long));
    }
    if (!mRbraceBitmap) {
        mRbraceBitmap = (unsigned long*)malloc((mNumWords) * sizeof(unsigned long));
    }
    if (!mLbracketBitmap) {
        mLbracketBitmap = (unsigned long*)malloc((mNumWords) * sizeof(unsigned long));
    }
    if (!mRbracketBitmap) {
        mRbracketBitmap = (unsigned long*)malloc((mNumWords) * sizeof(unsigned long));
    }*/
}

void SerialBitmap::buildStructuralCharacterBitmap() {
   // vectors for structural characters
    __m256i v_quote = _mm256_set1_epi8(0x22);
    __m256i v_colon = _mm256_set1_epi8(0x3a);
    __m256i v_escape = _mm256_set1_epi8(0x5c);
    __m256i v_lbrace = _mm256_set1_epi8(0x7b);
    __m256i v_rbrace = _mm256_set1_epi8(0x7d);
    __m256i v_comma = _mm256_set1_epi8(0x2c);
    __m256i v_lbracket = _mm256_set1_epi8(0x5b);
    __m256i v_rbracket = _mm256_set1_epi8(0x5d);

    // variables for saving temporary results in the first four steps
    unsigned long colonbit0, quotebit0, escapebit0, stringbit0, lbracebit0, rbracebit0, commabit0, lbracketbit0, rbracketbit0;
    unsigned long colonbit, quotebit, escapebit, stringbit, lbracebit, rbracebit, commabit, lbracketbit, rbracketbit;

    // variables for saving context information among different words
    int top_word = -1;
    for (int j = 0; j < mNumTmpWords; ++j) {
        colonbit = 0, quotebit = 0, escapebit = 0, stringbit = 0, lbracebit = 0, rbracebit = 0, commabit = 0, lbracketbit = 0, rbracketbit = 0;
        unsigned long i = j * 32;
        // step 1: build structural character bitmaps
        __m256i v_text = _mm256_loadu_si256(reinterpret_cast<const __m256i *>(mRecord + i));
        colonbit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_colon));
        quotebit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_quote));
        escapebit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_escape));
        lbracebit  = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_lbrace));
        rbracebit  = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_rbrace));
        commabit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_comma));
        lbracketbit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_lbracket));
        rbracketbit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_rbracket));
        // first half of the word (lowest 32 bits)
        if(j % 2 == 0) {
            colonbit0 = colonbit;
            quotebit0 = quotebit;
            escapebit0 = escapebit;
            lbracebit0 = lbracebit;
            rbracebit0 = rbracebit;
            commabit0 = commabit;
            lbracketbit0 = lbracketbit;
            rbracketbit0 = rbracketbit;
            continue;
        } else {
            // highest 32 bits inside a word
            colonbit = (colonbit << 32) | colonbit0;
            quotebit = (quotebit << 32) | quotebit0;
            escapebit = (escapebit << 32) | escapebit0;
            lbracebit = (lbracebit << 32) | lbracebit0;
            rbracebit = (rbracebit << 32) | rbracebit0;
            commabit = (commabit << 32) | commabit0;
            lbracketbit = (lbracketbit << 32) | lbracketbit0;
            rbracketbit = (rbracketbit << 32) | rbracketbit0;
            mColonBitmap[++top_word] = colonbit;
            mCommaBitmap[top_word] = commabit;
            mQuoteBitmap[top_word] = quotebit;
            mEscapeBitmap[top_word] = escapebit;
            mLbraceBitmap[top_word] = lbracebit;
            mRbraceBitmap[top_word] = rbracebit;
            mLbracketBitmap[top_word] = lbracketbit;
            mRbracketBitmap[top_word] = rbracketbit;
        }
    }   
}

void SerialBitmap::buildStructuralQuoteBitmapMison() {
    unsigned long top_b_unstructural_quote = -1;
    unsigned long large = 1UL<<63;
    unsigned long constant64 = 0xffffffffffffffff;
    unsigned long bb_unstructural_quote = 0;
    for (int j = 0; j < mNumWords; ++j) {
        // get backslash quote bitmap
        unsigned long backslash_quote = 0;
        if(j < mNumWords - 1){
            if(mQuoteBitmap[j + 1] & 1 == 1)
                backslash_quote = ((mQuoteBitmap[j] >> 1)|large) & mEscapeBitmap[j];
            else backslash_quote = ((mQuoteBitmap[j] >> 1)) & mEscapeBitmap[j];
        }
        else if(j == mNumWords - 1) backslash_quote = (mQuoteBitmap[j] >> 1) & mEscapeBitmap[j];
        unsigned long unstructural_quote = 0;
        // check the number of consecutive backslashes for each escaped quote
        while(backslash_quote!=0) {
            unsigned long x = backslash_quote;
            unsigned long s = x^(x-1);
            unsigned long backslash_quote_mask = s;
            int backslash_quote_mask_ones_num = __builtin_popcountl(s);
            int consecutive_backslash_num = 0;
            int end = j;
            int k;
            for (k = end; k >= 0; --k) {
                unsigned long backslash_b = mEscapeBitmap[k];
                if(j == k) {
                    unsigned long backslash_b_mask = (backslash_b & s) << (64 - backslash_quote_mask_ones_num);
                    unsigned long d = (~backslash_b_mask);
                    int leading_ones_num;
                    if(d == 0) leading_ones_num = 64;
                    else leading_ones_num = __builtin_clzl(d);
                    consecutive_backslash_num += leading_ones_num;
                    if(leading_ones_num != backslash_quote_mask_ones_num)
                        break;
                } else {
                    unsigned long backslash_b_mask = backslash_b & constant64;
                    unsigned long d = (~backslash_b_mask);
                    int leading_ones_num;
                    if(d == 0) leading_ones_num = 64;
                    else leading_ones_num = __builtin_clzl(d);
                    consecutive_backslash_num += leading_ones_num;
                    if(leading_ones_num != 64)
                        break;
                }
            }
            if((consecutive_backslash_num & 1) == 1) {
                x = backslash_quote;
                unsigned long e = x&(-x);
                unstructural_quote |= e;
            }
            x = backslash_quote;
            unsigned long r = x&(x-1);
            backslash_quote = r;
        }
        unstructural_quote = (~unstructural_quote);
        if (j == 0) mQuoteBitmap[j] &= (unstructural_quote << 1);
        else if (j < mNumWords - 1){
            if(bb_unstructural_quote&large){
                mQuoteBitmap[j] &= (unstructural_quote << 1 | 1);
            }
            else mQuoteBitmap[j] &= (unstructural_quote<<1);
        }
        bb_unstructural_quote = unstructural_quote;
    }
}

void SerialBitmap::buildStructuralQuoteBitmapPison() {
    uint64_t prev_iter_ends_odd_backslash = 0ULL;
    const uint64_t even_bits = 0x5555555555555555ULL;
    const uint64_t odd_bits = ~even_bits;
    for (int j = 0; j < mNumWords; ++j) {
        uint64_t escapebit = mEscapeBitmap[j];
        uint64_t quotebit = mQuoteBitmap[j];
        uint64_t bs_bits = escapebit;
        uint64_t start_edges = bs_bits & ~(bs_bits << 1);
        int64_t even_start_mask = even_bits ^ prev_iter_ends_odd_backslash;
        uint64_t even_starts = start_edges & even_start_mask;
        uint64_t odd_starts = start_edges & ~even_start_mask;
        uint64_t even_carries = bs_bits + even_starts;
        int64_t odd_carries;
        bool iter_ends_odd_backslash = __builtin_uaddll_overflow(bs_bits, odd_starts,
            (unsigned long long *)(&odd_carries));
        odd_carries |= prev_iter_ends_odd_backslash;
        prev_iter_ends_odd_backslash = iter_ends_odd_backslash ? 0x1ULL : 0x0ULL;
        uint64_t even_carry_ends = even_carries & ~bs_bits;
        uint64_t odd_carry_ends = odd_carries & ~bs_bits;
        uint64_t even_start_odd_end = even_carry_ends & odd_bits;
        uint64_t odd_start_even_end = odd_carry_ends & even_bits;
        uint64_t odd_ends = even_start_odd_end | odd_start_even_end;
        int64_t quote_bits = quotebit & ~odd_ends;
        mQuoteBitmap[j] = quote_bits;
    }  
}

void SerialBitmap::buildStringMaskBitmapMison() {
    int cnt_quote = 0;
    for (int j = 0; j < mNumWords; ++j) {
        unsigned long mQuote = mQuoteBitmap[j];
        unsigned long mString = 0;
        while(mQuote != 0){
            unsigned long m = mQuote ^ (mQuote - 1);
            mString = mString ^ m;
            mQuote &= (mQuote - 1);
            ++cnt_quote;
        }
        if((cnt_quote & 1) == 1){
            mString = ~mString;
        }
        mStrBitmap[j] = mString;
    } 
}

void SerialBitmap::buildStringMaskBitmapPison() {
    uint64_t prev_iter_inside_quote = 0ULL;
    unsigned long str_mask; 
    for (int j = 0; j < mNumWords; ++j) {
        unsigned long quote_bits = mQuoteBitmap[j];
        str_mask = _mm_cvtsi128_si64(_mm_clmulepi64_si128(
            _mm_set_epi64x(0ULL, quote_bits), _mm_set1_epi8(0xFFu), 0));
        str_mask ^= prev_iter_inside_quote;
        prev_iter_inside_quote = static_cast<uint64_t>(static_cast<int64_t>(str_mask) >> 63);
        mStrBitmap[j] = str_mask;
    }
}

void SerialBitmap::updateStructuralCharacterBitmap() {
    // variables for saving temporary results in the first four steps
    unsigned long colonbit, quotebit, escapebit, stringbit, lbracebit, rbracebit, commabit, lbracketbit, rbracketbit;
    unsigned long str_mask;
    for (int j = 0; j < mNumWords; ++j) {
        // get input info
        colonbit = mColonBitmap[j];
        commabit = mCommaBitmap[j];
        lbracebit = mLbraceBitmap[j];
        rbracebit = mRbraceBitmap[j];
        lbracketbit = mLbracketBitmap[j];
        rbracketbit = mRbracketBitmap[j];
        str_mask = mStrBitmap[j];
        unsigned long tmp = (~str_mask);
        mColonBitmap[j] = colonbit & tmp;
        mLbraceBitmap[j]  = lbracebit & tmp;
        mRbraceBitmap[j] = rbracebit & tmp;
        mCommaBitmap[j] = commabit & tmp;
        mLbracketBitmap[j] = lbracketbit & tmp;
        mRbracketBitmap[j] = rbracketbit & tmp;
    }
}

void SerialBitmap::buildLeveledBitmapPison() {
    // variables for saving temporary results in the first four steps
    unsigned long colonbit, quotebit, escapebit, stringbit, lbracebit, rbracebit, commabit, lbracketbit, rbracketbit;
    unsigned long str_mask;

     // variables for saving temporary results in the last step
    unsigned long lb_mask, rb_mask, cb_mask;
    unsigned long lb_bit, rb_bit, cb_bit;
    unsigned long first, second;
    int cur_level = -1;
    int max_positive_level = -1;

    for (int j = 0; j < mNumWords; ++j) {
        // get input info
        colonbit = mColonBitmap[j];
        commabit = mCommaBitmap[j];
        lbracebit = mLbraceBitmap[j];
        rbracebit = mRbraceBitmap[j];
        lbracketbit = mLbracketBitmap[j];
        rbracketbit = mRbracketBitmap[j];
        str_mask = mStrBitmap[j];
       
        if (mArraySupported) { 
            lb_mask = lbracebit | lbracketbit;
            rb_mask = rbracebit | rbracketbit;
        } else {
            lb_mask = lbracebit;
            rb_mask = rbracebit;
        }
        cb_mask = lb_mask | rb_mask;
        lb_bit = lb_mask & (-lb_mask);
        rb_bit = rb_mask & (-rb_mask);
        int top_word = j;
        if (!cb_mask) {
            if (cur_level >= 0 && cur_level <= mDepth) {
                if (!mLevColonBitmap[cur_level]) {
                    mLevColonBitmap[cur_level] = (unsigned long*)calloc(mNumWords, sizeof(unsigned long));
                }
                if (!mLevCommaBitmap[cur_level]) {
                    mLevCommaBitmap[cur_level] = (unsigned long*)calloc(mNumWords, sizeof(unsigned long));
                }
                if (colonbit) {
                    mLevColonBitmap[cur_level][top_word] = colonbit;
                } else {
                    mLevCommaBitmap[cur_level][top_word] = commabit;
                }
            }
        } else {
            first = 1;
            while (cb_mask || first) {
                if (!cb_mask) {
                    second = 1UL<<63;
                } else {
                    cb_bit = cb_mask & (-cb_mask);
                    second = cb_bit;
                }
                if (cur_level >= 0 && cur_level <= mDepth) {
                    if (!mLevColonBitmap[cur_level]) {
                        mLevColonBitmap[cur_level] = (unsigned long*)calloc(mNumWords, sizeof(unsigned long));
                    }
                    if (!mLevCommaBitmap[cur_level]) {
                        mLevCommaBitmap[cur_level] = (unsigned long*)calloc(mNumWords, sizeof(unsigned long));
                    }
                    unsigned long mask = second - first;
                    if (!cb_mask) mask = mask | second;
                    unsigned long colon_mask = mask & colonbit;
                    if (colon_mask) {
                        mLevColonBitmap[cur_level][top_word] |= colon_mask;
                    } else {
                        mLevCommaBitmap[cur_level][top_word] |= (commabit & mask);
                    }
                    if (cb_mask) {
                        if (cb_bit == rb_bit) {
                            mLevColonBitmap[cur_level][top_word] |= cb_bit;
                            mLevCommaBitmap[cur_level][top_word] |= cb_bit;
                        }
                        else if (cb_bit == lb_bit && (cur_level + 1 <= mDepth)) {
                            if (!mLevCommaBitmap[cur_level + 1]) {
                                mLevCommaBitmap[cur_level + 1] = (unsigned long*)calloc(mNumWords, sizeof(unsigned long));
                            }
                            mLevCommaBitmap[cur_level + 1][top_word] |= cb_bit;
                        }
                    }
                } 
                if (cb_mask) {
                    if (cb_bit == lb_bit) {
                        lb_mask = lb_mask & (lb_mask - 1);
                        lb_bit = lb_mask & (-lb_mask);
                        ++cur_level;
                        if (cur_level == 0) {
                            // JSON record could be an array
                            if (!mLevCommaBitmap[cur_level]) {
                                mLevCommaBitmap[cur_level] = (unsigned long*)calloc(mNumWords, sizeof(unsigned long));
                            }
                            mLevCommaBitmap[cur_level][top_word] |= cb_bit;
                        }
                    } else if (cb_bit == rb_bit) {
                        rb_mask = rb_mask & (rb_mask - 1);
                        rb_bit = rb_mask & (-rb_mask);
                        --cur_level;
                    }
                    first = second;
                    cb_mask = cb_mask & (cb_mask - 1);
                    if (cur_level > max_positive_level) {
                        max_positive_level = cur_level;
                    }
                } else {
                    first = 0;
                }
            }
        }
    }
    if (mDepth == MAX_LEVEL) mDepth = max_positive_level; 
}

void SerialBitmap::buildLeveledBitmapMison() {
    // variables for saving temporary results in the first four steps
    unsigned long colonbit, quotebit, escapebit, stringbit, lbracketbit, rbracketbit, commabit;

     // variables for saving temporary results in the last step
    unsigned long lb_mask, rb_mask, cb_mask;
    unsigned long lb_bit, rb_bit, cb_bit;
    unsigned long first, second;
    int cur_level = -1;

    StackElement S[MAX_STACK_DEPTH];
    for (int j = 0; j < mNumWords; ++j) {
        // get input info
        colonbit = mColonBitmap[j];
        commabit = mCommaBitmap[j];
        if (mArraySupported) {
            lbracketbit = mLbraceBitmap[j] | mLbracketBitmap[j];
            rbracketbit = mRbraceBitmap[j] | mRbracketBitmap[j];
        } else {
            lbracketbit = mLbraceBitmap[j];
            rbracketbit = mRbraceBitmap[j]; 
        }
        do {
            rb_bit = rbracketbit & (-rbracketbit);
            lb_bit = lbracketbit & (-lbracketbit);

            while (lb_bit != 0 && (rb_bit == 0 || lb_bit < rb_bit))
            {
                StackElement temp;
                temp.position = j;
                temp.bits = lb_bit;
                ++cur_level;
                if (cur_level <= mDepth && !mLevColonBitmap[cur_level]) {
                    mLevColonBitmap[cur_level] = (unsigned long*)malloc(mNumWords * sizeof(unsigned long));
                    memcpy(mLevColonBitmap[cur_level], mColonBitmap, 8 * mNumWords);
                }
                if (cur_level <= mDepth && !mLevCommaBitmap[cur_level]) {
                    mLevCommaBitmap[cur_level] = (unsigned long*)malloc(mNumWords * sizeof(unsigned long));
                    memcpy(mLevCommaBitmap[cur_level], mCommaBitmap, 8 * mNumWords);
                } 
                S[cur_level] = temp;
                lbracketbit = lbracketbit & (lbracketbit - 1);
                lb_bit = lbracketbit & (-lbracketbit);
            }
            if (rb_bit != 0) {
                StackElement temp = S[cur_level];
                lb_bit = temp.bits;
                int pos = temp.position;
                --cur_level;
                if (cur_level < mDepth) {
                if (cur_level >= 0) {
                    // clear the corresponding colon and comma bits at upper level
                    if (j == pos) {
                        mLevColonBitmap[cur_level][j] &= ~(rb_bit - lb_bit);
                        mLevCommaBitmap[cur_level][j] &= ~(rb_bit - lb_bit);
                    } else {
                        mLevColonBitmap[cur_level][pos] &= lb_bit - 1;
                        mLevCommaBitmap[cur_level][pos] &= lb_bit - 1;
                        mLevColonBitmap[cur_level][j] &= ~(rb_bit - 1);
                        mLevCommaBitmap[cur_level][j] &= ~(rb_bit - 1);
                        for (int k = pos + 1; k < j; ++k) {
                            mLevColonBitmap[cur_level][k] = 0;
                            mLevCommaBitmap[cur_level][k] = 0;
                        }
                    }
                }
                if (rb_bit & mRbraceBitmap[j]) 
                    mLevColonBitmap[cur_level + 1][j] |= rb_bit; 
                else if (rb_bit & mRbracketBitmap[j])  
                    mLevCommaBitmap[cur_level + 1][j] |= rb_bit; 
                if (lb_bit & mLbracketBitmap[pos]) 
                    mLevCommaBitmap[cur_level + 1][pos] |= lb_bit;
                ///if (cur_level == 3) cout<<"bracket "<<cur_level<<" "<<j<<" "<<lb_bit<<" "<<rb_bit<<endl;
                }
            }
            rbracketbit = rbracketbit & (rbracketbit - 1);
        } while (rb_bit != 0);
        //cout<<"cur level "<<cur_level<<endl;
    }
    //cout<<"final_level "<<cur_level<<endl;
}

void SerialBitmap::indexConstructionMison(int num_step) {
    buildStructuralCharacterBitmap();
    if (num_step >= 2) buildStructuralQuoteBitmapMison();
    if (num_step >= 3) buildStringMaskBitmapMison();
    if (num_step >= 4) updateStructuralCharacterBitmap();
    if (num_step >= 5) buildLeveledBitmapMison();
}

void SerialBitmap::indexConstructionMisonPlus(int num_step) {
    buildStructuralCharacterBitmap();
    if (num_step >= 2) buildStructuralQuoteBitmapPison();
    if (num_step >= 3) buildStringMaskBitmapPison();
    if (num_step >= 4) updateStructuralCharacterBitmap();
    if (num_step >= 5) buildLeveledBitmapMison();
}

void SerialBitmap::indexConstructionSbSPison(int num_step) {
    buildStructuralCharacterBitmap();
    if (num_step >= 2) buildStructuralQuoteBitmapPison();
    if (num_step >= 3) buildStringMaskBitmapPison();
    if (num_step >= 4) updateStructuralCharacterBitmap();
    if (num_step >= 5) buildLeveledBitmapPison();
}

bool SerialBitmap::findFieldQuotePos(long colon_pos, long& start_pos, long& end_pos) {
    long w_id = colon_pos/64;
    long offset = colon_pos%64;
    long start_quote = 0;
    long end_quote = 0;
    start_pos = 0; end_pos = 0;
    while (w_id >= 0)
    {
        unsigned long quotebit = this->mQuoteBitmap[w_id];
        unsigned long offset = w_id * 64 + __builtin_ctzll(quotebit);
        while (quotebit && offset < colon_pos)
        {
            if (end_pos != 0)
            {
                start_quote = offset;
            }
            else if(start_quote == 0)
            {
                start_quote = offset;
            }
            else if(end_quote == 0)
            {
                end_quote = offset;
            }
            else
            {
                start_quote = end_quote;
                end_quote = offset;
            }
            quotebit = quotebit & (quotebit - 1);
            offset = w_id * 64 + __builtin_ctzll(quotebit); 
        }
        if(start_quote != 0 && end_quote == 0)
        {
            end_quote = start_quote;
            start_quote = 0;
            end_pos = end_quote;
        }
        else if(start_quote != 0 && end_quote != 0)
        {
            start_pos = start_quote;
            end_pos = end_quote;
            return true;
        }
        --w_id;
    }
    return false;
}

/*void SerialBitmap::generateAutomaton(QueryAutomaton& qa) {
    qa.addTransEle(1, "", OBJECT, 2, false);
    qa.addTransEle(2, "items", KEY_ARRAY, 3, false);
    qa.addTransEle(3, "", OBJECT, 4, false);
    qa.addTransEle(4, "abcde", KEY, 5, false);
   // qa.addTransEle(5, "price", KEY, 6, false);
    qa.addTransEle(5, "", OUTPUT_CANDIDATE, 5, true);
}*/

void SerialBitmap::generateAutomaton(QueryAutomaton& qa) {
    qa.addTransEle(1, "", ARRAY, 2, false);
    qa.addTransEle(2, "", OBJECT, 3, false);
    qa.addTransEle(3, "entities", KEY_OBJECT, 4, false);
    qa.addTransEle(3, "id", KEY, 8, true);
//    qa.addTransEle(3, "fake", KEY_OBJECT, 8, true);
  //  qa.addTransEle(3, "user_mentions", KEY_ARRAY, 10, true);
    qa.addTransEle(4, "urls", KEY_ARRAY, 5, false);
    qa.addTransEle(4, "user_mentions", KEY_ARRAY, 10, true);
    qa.addTransEle(5, "", OBJECT, 6, false);
    qa.addTransEle(6, "url", KEY, 7, false);
    qa.addTransEle(7, "", OUTPUT_CANDIDATE, 7, true);
   // qa.addTransEle(8, "id", KEY, 9, true);
   // qa.addTransEle(9, "", OUTPUT_CANDIDATE, 9, true);
    qa.addTransEle(10, "", OBJECT, 11, false);
    qa.addTransEle(11, "id", KEY, 12, true);
    qa.addTransEle(8, "", OUTPUT_CANDIDATE, 8, true);
    qa.addTransEle(12, "", OUTPUT_CANDIDATE, 12, true);
}

/*void SerialBitmap::generateAutomaton(QueryAutomaton& qa) {
    qa.addTransEle(1, "", ARRAY, 2, false);
    qa.addTransEle(2, "", OBJECT, 3, false);
    qa.addTransEle(3, "entities", KEY_OBJECT, 4, false);
    qa.addTransEle(3, "id", KEY, 8, true);
    //qa.addTransEle(3, "fake", KEY_ARRAY, 9, true);
    //qa.addTransEle(3, "user_mentions", KEY_ARRAY, 10, true);
    qa.addTransEle(4, "urls", KEY_ARRAY, 5, false);
    qa.addTransEle(5, "", OBJECT, 6, false);
    qa.addTransEle(6, "url", KEY, 7, false);
    qa.addTransEle(7, "", OUTPUT_CANDIDATE, 7, true);
   // qa.addTransEle(8, "id", KEY, 9, true);
   // qa.addTransEle(9, "", OUTPUT_CANDIDATE, 9, true);
    //qa.addTransEle(10, "", OBJECT, 11, false);
    //qa.addTransEle(11, "fake", KEY, 11, true);
    qa.addTransEle(8, "", OUTPUT_CANDIDATE, 8, true);
}*/


/*void SerialBitmap::generateAutomaton(QueryAutomaton& qa) {
    qa.addTransEle(1, "", OBJECT, 2, false);
    qa.addTransEle(2, "products", KEY_ARRAY, 3, false);
    qa.addTransEle(3, "", OBJECT, 4, false);
    qa.addTransEle(4, "validFrom", KEY, 5, false);
    // qa.addIndexConstraints(5, 1, 3);
 //   qa.addTransEle(5, "", OBJECT, 6, false);
 //   qa.addIndexConstraints(5, 1, 3);
 //   qa.addTransEle(6, "id", KEY, 7, false);
    qa.addTransEle(5, "", OUTPUT_CANDIDATE, 5, true);
}*/


/*void SerialBitmap::generateAutomaton(QueryAutomaton& qa) {
    qa.addTransEle(1, "", ARRAY, 2, false);
    qa.addTransEle(2, "", OBJECT, 3, false);
    qa.addTransEle(3, "id", KEY, 4, false);
    qa.addTransEle(4, "", OUTPUT_CANDIDATE, 4, true);
}*/

/*void SerialBitmap::generateAutomaton(QueryAutomaton& qa) {
    qa.addTransEle(1, "", ARRAY, 2, false);
    qa.addTransEle(2, "", OBJECT, 3, false);
    qa.addTransEle(3, "routes", KEY_ARRAY, 4, false);
    qa.addTransEle(4, "", OBJECT, 5, false);
    qa.addTransEle(5, "summary", KEY, 6, false);
    qa.addTransEle(6, "", OUTPUT_CANDIDATE, 6, true);
}*/

// $[*].routes[*].legs[*].steps[*].distance.text
/*void SerialBitmap::generateAutomaton(QueryAutomaton& qa) {
    qa.addTransEle(1, "", ARRAY, 2, false);
    qa.addTransEle(2, "", OBJECT, 3, false);
    qa.addTransEle(3, "routes", KEY_ARRAY, 4, false);
    qa.addTransEle(4, "", OBJECT, 5, false);
    qa.addTransEle(5, "legs", KEY_ARRAY, 6, false);
    qa.addTransEle(6, "", OBJECT, 7, false);
    qa.addTransEle(7, "steps", KEY_ARRAY, 8, false);
    qa.addTransEle(8, "", OBJECT, 9, false);
    qa.addTransEle(9, "distance", KEY_OBJECT, 10, false); 
    qa.addTransEle(10, "value", KEY, 11, false);
    qa.addTransEle(11, "", OUTPUT_CANDIDATE, 11, true);
}*/

// $.products[*].categoryPath[*].id
/*void SerialBitmap::generateAutomaton(QueryAutomaton& qa) {
    qa.addTransEle(1, "", OBJECT, 2, false);
    qa.addTransEle(2, "products", KEY_ARRAY, 3, false);
    qa.addTransEle(3, "", OBJECT, 4, false);
    qa.addTransEle(4, "categoryPath", KEY_ARRAY, 5, false);
    // qa.addIndexConstraints(5, 1, 3);
    qa.addTransEle(5, "", OBJECT, 6, false);
    //qa.addIndexConstraints(5, 1, 3);
 //   qa.addTransEle(6, "id", KEY, 7, false);
    qa.addTransEle(6, "name", KEY, 8, false);
    qa.addTransEle(7, "", OUTPUT_CANDIDATE, 7, true);
    qa.addTransEle(8, "", OUTPUT_CANDIDATE, 8, true);
}*/

// $.products[*].categoryPath[*].id
/*void SerialBitmap::generateAutomaton(QueryAutomaton& qa) {
    qa.addTransEle(1, "", OBJECT, 1, false);
    qa.addTransEle(1, "products", KEY_ARRAY, 2, false);
    qa.addTransEle(2, "", OBJECT, 2, false);
    qa.addTransEle(2, "categoryPath", KEY_ARRAY, 3, false);
    // qa.addIndexConstraints(5, 1, 3);
    qa.addTransEle(3, "", OBJECT, 3, false);
    // qa.addIndexConstraints(3, 1, 3);
    qa.addTransEle(3, "id", KEY, 4, false);
    qa.addIndexConstraints(3, 1, 3);
    qa.addTransEle(4, "", OUTPUT_CANDIDATE, 4, true);
}*/


/*void SerialBitmap::generateAutomaton(QueryAutomaton& qa) {
//    qa.addTransEle(1, "", OBJECT, 2, false);
//    qa.addTransEle(2, "products", KEY_ARRAY, 3, false);
    qa.addTransEle(1, "", OBJECT, 2, false);
    qa.addTransEle(2, "categoryPath", KEY_ARRAY, 3, false);
    // qa.addIndexConstraints(5, 1, 3);
    qa.addTransEle(3, "", OBJECT, 4, false);
    qa.addIndexConstraints(3, 0, 3);
    qa.addTransEle(4, "id", KEY, 5, false);
    qa.addTransEle(5, "", OUTPUT_CANDIDATE, 5, true);
}*/


// $[*].entities.urls[*].url
/*void SerialBitmap::generateAutomaton(QueryAutomaton& qa) {
    qa.addTransEle(1, "", ARRAY, 2, false);
    qa.addTransEle(2, "", OBJECT, 3, false);
    qa.addTransEle(3, "entities", KEY_OBJECT, 4, false);
    qa.addTransEle(4, "urls", KEY_ARRAY, 5, false);
    qa.addTransEle(5, "", OBJECT, 6, false);
    qa.addTransEle(6, "url", KEY, 7, false);
    qa.addTransEle(7, "", OUTPUT_CANDIDATE, 7, true);
}*/

// $.meta.view.columns[*].name
/*void SerialBitmap::generateAutomaton(QueryAutomaton& qa) {
    qa.addTransEle(1, "", OBJECT, 2, false);
    qa.addTransEle(2, "meta", KEY_OBJECT, 3, false);
    qa.addTransEle(3, "view", KEY_OBJECT, 4, false);
    qa.addTransEle(4, "columns", KEY_ARRAY, 5, false);
    qa.addTransEle(5, "", OBJECT, 6, false);
    qa.addTransEle(6, "name", KEY, 7, false);
    qa.addTransEle(7, "", OUTPUT_CANDIDATE, 7, true);
}*/

// $.items[*].bestMarketplacePrice.price
/*void SerialBitmap::generateAutomaton(QueryAutomaton& qa) {
    qa.addTransEle(1, "", OBJECT, 2, false);
    qa.addTransEle(2, "items", KEY_ARRAY, 3, false);
    qa.addTransEle(3, "", OBJECT, 4, false);
    qa.addTransEle(4, "bestMarketplacePrice", KEY_OBJECT, 5, false);
    qa.addTransEle(5, "price", KEY, 6, false);
    qa.addTransEle(6, "", OUTPUT_CANDIDATE, 6, true);
}*/

// $[*].claims.P150[*].mainsnak.property
//void SerialBitmap::generateAutomaton(QueryAutomaton& qa) {
    /*qa.addTransEle(1, "", ARRAY, 2, false);
    qa.addTransEle(2, "", OBJECT, 2, false);
    qa.addTransEle(2, "claims", KEY_OBJECT, 3, false);
    qa.addTransEle(3, "P150", KEY_ARRAY, 4, false);
    qa.addTransEle(4, "", OBJECT, 4, false);
    qa.addTransEle(4, "mainsnak", KEY_OBJECT, 5, false);
    qa.addTransEle(5, "property", KEY, 6, false);
    qa.addTransEle(6, "", OUTPUT_CANDIDATE, 6, true);*/
/*    qa.addTransEle(1, "", ARRAY, 2, false);
    qa.addTransEle(2, "", OBJECT, 3, false);
    qa.addTransEle(3, "claims", KEY_OBJECT, 4, false);
    qa.addTransEle(4, "P150", KEY_ARRAY, 5, false);
    qa.addTransEle(5, "", OBJECT, 6, false);
    qa.addTransEle(6, "mainsnak", KEY_OBJECT, 7, false);
    qa.addTransEle(7, "property", KEY, 8, false);
    qa.addTransEle(8, "", OUTPUT_CANDIDATE, 8, true);
}*/

// $[*].claims.P150[*].mainsnak.property
/*void SerialBitmap::generateAutomaton(QueryAutomaton& qa) {
    qa.addTransEle(1, "", ARRAY, 2, false);
    qa.addTransEle(2, "", OBJECT, 3, false);
    qa.addTransEle(3, "claims", KEY_OBJECT, 4, false);
    qa.addTransEle(4, "P150", KEY_ARRAY, 5, false);
    qa.addTransEle(5, "", OBJECT, 6, false);
    qa.addTransEle(6, "mainsnak", KEY_OBJECT, 7, false);
    qa.addTransEle(7, "property", KEY, 8, false);
    qa.addTransEle(8, "", OUTPUT_CANDIDATE, 8, true);
}*/

/*void SerialBitmap::getValue(long& cur_colon_pos, unsigned long& colon_brace_bit, bool is_last_colon, string& output, long& output_size) {
    if (is_last_colon == true) {
        long close_brace_pos = (word_id) * 64 + __builtin_ctzll(colon_brace_bit);
        long text_length = close_brace_pos - cur_colon_pos - 1;
        char* text = (char*)malloc(text_length + 1);
        memcpy(text, mRecord + cur_colon_pos + 1, text_length);
        text[text_length] = '\0';
        output.append(text);
        //  cout<<"temp state output "<<text<<endl;
        free(text);
        ++output_size;  
    } else {
        // get the next colon position for the last key field
        long next_colon_pos = (word_id) * 64 + __builtin_ctzll(colon_brace_bit);
        long st = -1, ed = -1;
        findFieldQuotePos(next_colon_pos, st, ed);
        long text_length = st - cur_colon_pos - 1;
        char* text = (char*)malloc(text_length + 1);
        memcpy(text, mRecord + cur_colon_pos + 1, text_length);
        text[text_length] = '\0';
        output.append(text);
        //  cout<<"temp state output "<<text<<endl;
        free(text);
        ++output_size;
    }
}

void SerialBitmap::preProcessing(QueryAutomaton& qa, int& temp_state, long& last_colon_pos, unsigned long& colon_brace_bit, bool is_last_colon, string& output, long& output_size) {
    int temp_state_type = qa.getType(temp_state);
    if (last_colon_pos > -1) {
        if (temp_state_type == OUTPUT_CANDIDATE) {
            getValue(last_colon_pos, colon_brace_bit, is_last_colon, output, output_size); 
        }
        last_colon_pos = -1;
    }
}*/

/*void SerialBitmap::processOutputMatchedBitmaps(QueryAutomaton& qa, long& word_id, long& last_colon_pos, int& temp_state, unsigned long& colonbit, unsigned long& lbracketbit, string& output, long& output_size) {
    for (int i = 0; i < state_mask_info->num_states; ++i) {
        int state = state_mask_info->state_masks[i].state;
        int state_type = qa.getType(state);
        if (!(state != UNMATCHED_STATE && state_type == OUTPUT_CANDIDATE)) continue;
        while (state_mask_info->state_masks[i].mask > 0) {
            if (state_mask_info->state_masks[i].mask & lbracketbit) {
                if (state 
            }
            long cur_colon_pos = (word_id) * 64 + __builtin_ctzll(state_mask_info->state_masks[i].mask);
            // find the colon position for the next consecutive key field (from colonbit)
            // extract the current matched bit
            unsigned long matchbit =
                state_mask_info->state_masks[i].mask & (-state_mask_info->state_masks[i].mask);
            // remove the current matched bit and its prior bits from colon mask
            unsigned long match_mask = matchbit ^ (matchbit - 1);
            unsigned long tempbit = colonbit & (~match_mask);
            // process the matched output
            if (tempbit) {
                getValue(cur_colon_pos, tempbit, false, output, output_size);
            } else {
                // colon in state_mask.mask must be the last one
                last_colon_pos = offset;
                temp_state = state_mask_info->state_masks[i].state;
            }
            // move forward to the next matched key field
            state_mask_info->state_masks[i].mask =
                state_mask_info->state_masks[i].mask & (state_mask_info->state_masks[i].mask - 1);
        }
    }
}*/

void SerialBitmap::processKeyNoBracket(QueryAutomaton& qa, long& word_id, __m256i& v_first, __m256i& v_second, long& last_colon_pos, int& temp_state, unsigned long& st_quotebit, unsigned long& ed_quotebit, unsigned long& colonbit, string& output, long& output_size) {
    int temp_state_type = qa.getType(temp_state);
    if (last_colon_pos > -1) {
        // process the last key field in previous word
        if (temp_state_type == OUTPUT_CANDIDATE) {
            // get the next colon position for the last key field
            long offset = (word_id) * 64 + __builtin_ctzll(colonbit);
            long st = -1, ed = -1;
            findFieldQuotePos(offset, st, ed);
            long text_length = st - last_colon_pos - 1;
            char* text = (char*)malloc(text_length + 1);
            memcpy(text, mRecord + last_colon_pos + 1, text_length);
            text[text_length] = '\0';
            output.append(text);
          //  cout<<"temp state output "<<text<<endl;
            free(text);
            ++output_size;
        }
    }
    last_colon_pos = -1;
    // find matched bitmap for the current word (interval)
    unsigned long no_bracketbit = 0;
    StateMaskInfo* state_mask_info = qa.findMatchedBitmapFromKey(v_first, v_second, st_quotebit, ed_quotebit, colonbit, no_bracketbit);
    // if(temp_state >= 0) cout<<"word id "<<word_id<<"text "<<substring_200(mRecord + 64 * word_id, 0, 64)<<endl;
    // if (temp_state_type == OUTPUT_CANDIDATE) {
        for (int i = 0; i < state_mask_info->num_states; ++i) {
            int state = state_mask_info->state_masks[i].state;
            int state_type = qa.getType(state);
            if (!(state != UNMATCHED_STATE && state_type == OUTPUT_CANDIDATE)) continue;
            while (state_mask_info->state_masks[i].mask > 0) {
                long offset = (word_id) * 64 + __builtin_ctzll(state_mask_info->state_masks[i].mask);
                // find the colon position for the next consecutive key field (from colonbit)
                // extract the current matched bit
                unsigned long matchbit = 
                    state_mask_info->state_masks[i].mask & (-state_mask_info->state_masks[i].mask);
                // remove the current matched bit and its prior bits from colon mask
                unsigned long match_mask = matchbit ^ (matchbit - 1);
                unsigned long tempbit = colonbit & (~match_mask);
                // process the matched output
                if (tempbit) {
                    // if (state_type == OUTPUT_CANDIDATE) {
                        long next_colon_pos = (word_id) * 64 + __builtin_ctzll(tempbit);
                        long st = -1, ed = -1;
                        findFieldQuotePos(next_colon_pos, st, ed);
                        long text_length = st - offset - 1;
                        char* text = (char*)malloc(text_length + 1);
                        memcpy(text, mRecord + last_colon_pos + 1, text_length);
                        text[text_length] = '\0';
                        output.append(text);
                        free(text);
                        ++output_size;
                   // }
               } else {
                    // colon in state_mask.mask must be the last one
                    last_colon_pos = offset;
                    temp_state = state_mask_info->state_masks[i].state;
               }
               // move forward to the next matched key field
               state_mask_info->state_masks[i].mask = 
                   state_mask_info->state_masks[i].mask & (state_mask_info->state_masks[i].mask - 1);
           }    
        }
    // }
}

// get carries for matches
void SerialBitmap::processNoKeyInterval(QueryAutomaton& qa,__m256i& v_first, __m256i& v_second, unsigned long& st_quotebit, unsigned long& ed_quotebit, unsigned long& colonbit) {
     unsigned long no_bracketbit = 0;
     StateMaskInfo* state_mask_info = qa.findMatchedBitmapFromKey(v_first, v_second, st_quotebit, ed_quotebit, colonbit, no_bracketbit);
     // cout<<"text (no key interval) "<<substring_200(mRecord + i - 32, 0, 64)<<endl;
}

void SerialBitmap::processKeyPriPairs(QueryAutomaton& qa, long& word_id, unsigned long& colon_brace_bit, long& last_colon_pos, string& output, long& output_size) {
    if (qa.hasMatchedKeyType(KEY)) {
        while (colon_brace_bit) {
            long cur_colon_pos = word_id * 64 + __builtin_ctzll(colon_brace_bit);
            if (last_colon_pos > -1) {
                long st = -1, ed = -1;
                findFieldQuotePos(last_colon_pos, st, ed);
                int key_len = ed - st - 1;
                if (qa.hasMatchedKeyLen(key_len)) {
                    // get the content of current key field
                    memcpy(mKey, mRecord + st + 1, key_len);
                    mKey[key_len] = '\0';
                    int next_state = qa.getNextState(mKey, key_len, KEY);
                    if (next_state > 0) {
                        if (qa.getType(next_state) == OUTPUT_CANDIDATE) {
                            // add matched value into output list (print mode)
                            findFieldQuotePos(cur_colon_pos, st, ed);
                            long text_length = st - last_colon_pos - 1;
                            char* text = (char*)malloc(text_length + 1);
                            memcpy(text, mRecord + last_colon_pos + 1, text_length);
                            text[text_length] = '\0';
                            output.append(text);
                            free(text);
                            ++output_size;
                            last_colon_pos = -1;
                        }
                    }
                }
            }
            last_colon_pos = cur_colon_pos;
            colon_brace_bit = colon_brace_bit & (colon_brace_bit - 1);
        }
    } else {
        // search for the position of the last key in the current word
        while (colon_brace_bit) {
            long cur_colon_pos = word_id * 64 + __builtin_ctzll(colon_brace_bit);
            last_colon_pos = cur_colon_pos;
            colon_brace_bit = colon_brace_bit & (colon_brace_bit - 1);
        }
    }
} 

void SerialBitmap::processKeyWithBracket(QueryAutomaton& qa, long& word_id, __m256i& v_first, __m256i& v_second, long& last_colon_pos, int& temp_state, unsigned long& st_quotebit, unsigned long& ed_quotebit, unsigned long& colonbit, unsigned long& lbracketbit, int type, bool& match_flag, bool& skip_arr_ele, bool& skip_unmatched_tkn, string& output, long& output_size) {
    match_flag = false;
    int temp_state_type = qa.getType(temp_state);
    if (last_colon_pos > -1) {
        // process the last key field in previous word
        if (temp_state_type == OUTPUT_CANDIDATE) {
            // get the next colon position for the last key field
            long offset = (word_id) * 64 + __builtin_ctzll(colonbit);
            long st = -1, ed = -1;
            findFieldQuotePos(offset, st, ed);
            long text_length = st - last_colon_pos - 1;
            char* text = (char*)malloc(text_length + 1);
            memcpy(text, mRecord + last_colon_pos + 1, text_length);
            text[text_length] = '\0';
            output.append(text);
        ///    cout<<"temp state output "<<text<<endl;
            free(text);
            ++output_size;
        }
    }
    last_colon_pos = -1;
    // find matched bitmap for the current word (interval)
    StateMaskInfo* state_mask_info = qa.findMatchedBitmapFromKey(v_first, v_second, st_quotebit, ed_quotebit, colonbit, lbracketbit, type);
//     if (state_mask_info->num_states > 1) cout<<"word id "<<word_id<<"text {: "<<substring_200(mRecord + 64 * word_id, 0, 64)<<" num states "<<state_mask_info->num_states<<endl;
    // if (temp_state_type == OUTPUT_CANDIDATE) {
        for (int i = 0; i < state_mask_info->num_states; ++i) {
            int state = state_mask_info->state_masks[i].state;
            if (state == UNMATCHED_STATE) continue;
            int state_type = qa.getType(state);
            while (state_mask_info->state_masks[i].mask > 0) {
                bitset<64> tempmask(state_mask_info->state_masks[i].mask);
  //              cout<<"check "<<tempmask<<" state "<<state_mask_info->state_masks[i].state<<endl;
                long offset = (word_id) * 64 + __builtin_ctzll(state_mask_info->state_masks[i].mask);
                // find the colon position for the next consecutive key field (from colonbit)
                // extract the current matched bit
                unsigned long matchbit =
                    state_mask_info->state_masks[i].mask & (-state_mask_info->state_masks[i].mask);
                // remove the current matched bit and its prior bits from colon mask
                unsigned long match_mask = matchbit ^ (matchbit - 1);
                unsigned long tempbit = colonbit & (~match_mask);
                // process the matched output
                if (tempbit) {
                    bitset<64> tempbitmask(tempbit);
    //                cout<<"check1 "<<tempbitmask<<" "<<temp_state_type<<endl;
                    if (state_type == OUTPUT_CANDIDATE) {
                        long next_colon_pos = (word_id) * 64 + __builtin_ctzll(tempbit);
                        long st = -1, ed = -1;
                        findFieldQuotePos(next_colon_pos, st, ed);
                        long text_length = st - offset - 1;
                        char* text = (char*)malloc(text_length + 1);
                        memcpy(text, mRecord + last_colon_pos + 1, text_length);
                        text[text_length] = '\0';
                        output.append(text);
                        free(text);
                        ++output_size;
                    }
               } else {
                    // colon in state_mask.mask must be the last one
                    int next_state = state_mask_info->state_masks[i].state;
     //               cout<<"next state check "<<next_state<<endl;
                    if (next_state != UNMATCHED_STATE || skip_unmatched_tkn == false) {
     //                   cout<<"next state "<<next_state<<endl;
                        qa.pushStack(next_state);
                        match_flag = true;
                        // check index for the first element inside array
                        if (type == KEY_ARRAY && qa.hasIndexConstraints()) {
                            if (qa.checkArrayCounter() == false) {
                                skip_arr_ele = true;
                            } else skip_arr_ele = false;
                        }
                    }
                    // break;
               }
               // move forward to the next matched key field
               state_mask_info->state_masks[i].mask =
                   state_mask_info->state_masks[i].mask & (state_mask_info->state_masks[i].mask - 1);
           }
        }
    //}
}

// TODO: remove skip_unmatched_tkn, and generate different code during compilation
void SerialBitmap::processKeyBracket(QueryAutomaton& qa, int type, long& last_colon_pos, bool& match_flag, bool& skip_arr_ele, bool& skip_unmatched_tkn) {
    match_flag = false;
    int next_state = UNMATCHED_STATE;
    if (qa.hasMatchedKeyType(type)) {
        long st = -1, ed = -1;
        findFieldQuotePos(last_colon_pos, st, ed);
        int key_len = ed - st - 1;
        if (qa.hasMatchedKeyLen(key_len)) {
            memcpy(mKey, mRecord + st + 1, key_len);
            mKey[key_len] = '\0';
            next_state = qa.getNextState(mKey, key_len, type);
        }
    }
    // push matched state or unmatched state for not skipping unmatched tokens
    if (next_state != UNMATCHED_STATE || skip_unmatched_tkn == false) {
        qa.pushStack(next_state);
        match_flag = true;
        // check index for the first element inside array
        if (type == KEY_ARRAY && qa.hasIndexConstraints()) {
            if (qa.checkArrayCounter() == false) {
                skip_arr_ele = true;
            } else skip_arr_ele = false;
        }
    }
}

// TODO: remove skip_unmatched_tkn, and generate different code during compilation
void SerialBitmap::processOpenBracket(QueryAutomaton& qa, int type, bool& match_flag, bool& skip_arr_ele, bool& skip_unmatched_tkn) {
    match_flag = false;
    int next_state = UNMATCHED_STATE;
    if (skip_unmatched_tkn == false && skip_arr_ele == true) {
        // simply set next_state as unmatched state and change skip_arr_ele back to false
        skip_arr_ele = false;
    } else {
        next_state = qa.getNextStateNoKey(type);
    }
    if (skip_unmatched_tkn == false || (next_state != UNMATCHED_STATE && skip_arr_ele == false)) {
        qa.pushStack(next_state);
        match_flag = true;
        if (type == ARRAY && qa.hasIndexConstraints()) {
            if (qa.checkArrayCounter() == false) {
                skip_arr_ele = true;
            } else skip_arr_ele = false;
        }
    }
}

// TODO: remove skip_unmatched_tkn, and generate different code during compilation
void SerialBitmap::processCloseBracket(QueryAutomaton& qa, bool& skip_arr_ele) {
    if (qa.hasIndexConstraints() && skip_arr_ele == true) {
        skip_arr_ele = false;
    }
    qa.popStack();
}

void SerialBitmap::processArrayMember(QueryAutomaton& qa, long& last_comma_pos, bool& skip_arr_ele) {
    qa.addArrayCounter();
    if (qa.checkArrayCounter() == false) {
        skip_arr_ele = true;
    } else skip_arr_ele = false;

}

void SerialBitmap::processCandidateArrayInterval(QueryAutomaton& qa, long& word_id, unsigned long& commabit, long& last_comma_pos, bool& skip_arr_ele) {
    if (qa.hasIndexConstraints()) {
        // check if needs to process the candidate array member
        if (last_comma_pos > -1) {
            // process the previous comma, previous interval is a part of array members
            processArrayMember(qa, last_comma_pos, skip_arr_ele);
            last_comma_pos = -1;
        }
        // quick check for current interval
        int cnt_comma = 0;
        while (commabit) {
            if (cnt_comma == 1) {
                ++cnt_comma;
                break;
            }
            long cur_comma_pos = (word_id) * 64 + __builtin_ctzll(commabit);
            last_comma_pos = cur_comma_pos;
            ++cnt_comma;
            commabit = commabit & (commabit - 1);
        }
        // current interval is a part of array members
        // otherwise, the only comma within this interval will be verified and processed when meeting the right symbol
        if (cnt_comma > 1) {
            last_comma_pos = -1;
            while (commabit) {
                qa.addArrayCounter();
                if (qa.checkArrayCounter() == false) {
                    skip_arr_ele = true;
                } else skip_arr_ele = false;
                long cur_comma_pos = (word_id) * 64 + __builtin_ctzll(commabit);
                last_comma_pos = cur_comma_pos;
                commabit = commabit & (commabit - 1);
            }
        }
    }
    else if (last_comma_pos > -1) {
        // previous interval is not a part of array members
        last_comma_pos = -1;
    }
}

/*void SerialBitmap::processNoBracketInterval(QueryAutomaton& qa, char* record, unsigned long& st_quotebit, unsigned long& ed_quotebit, unsigned long& colon_bit) {
    int trans_idx = 0;
    int cur_idx = qa.mCurState - 1;
    int num_trans_str = qa.mDfa.trans_ele[cur_idx].num_trans_str;
    __m256i v_first = _mm256_loadu_si256(reinterpret_cast<const __m256i *>(record));
    __m256i v_second = _mm256_loadu_si256(reinterpret_cast<const __m256i *>(record + 32)); 
    if (1==2 && num_trans_str == 1) {

    } else {
         int trans_idx = 0;
         while (trans_idx < num_trans_str)
         {
             int i = trans_idx;
             ++trans_idx;
             int trans_type = qa.mDfa.trans_ele[cur_idx].t_str_info[i].type;
             int next_state = qa.mDfa.trans_ele[cur_idx].t_str_info[i].next_state;
             if (trans_type == OBJECT && trans_type == ARRAY) continue;
             char* key = qa.mDfa.trans_ele[cur_idx].t_str_info[i].key;
             int key_len = qa.mDfa.trans_ele[cur_idx].t_str_info[i].key_len;
             //unsigned long mask = 0;
             int last_match_idx = qa.mStateMaskInfo.state_masks[i].last_match_idx;
             qa.mStateMaskInfo.state_masks[i].last_match_idx = -1;
             unsigned long carry_mask = 1UL<<63;
             // start quote
             unsigned long tmask = st_quotebit;
             if (tmask == 0 && last_match_idx < 0) {
                 continue;
             }
             if (tmask & carry_mask)
                 qa.mStateMaskInfo.state_masks[i].last_match_idx = 0;
             tmask = tmask << 1;
             if (last_match_idx == 0) tmask = tmask | 1;
             // check key field
             bool skip_loop = false;
             for (int j = 0; j < key_len; ++j) {
                 char ch = key[j];
                 __m256i v_ch = _mm256_set1_epi8(ch);
                 unsigned long chbit0, chbit;
                 chbit0 = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_first, v_ch));
                 chbit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_second, v_ch));
                 chbit = (chbit << 32) | chbit0;
                 tmask = tmask & chbit;
                 if (tmask == 0 && last_match_idx < j + 1) {
                     skip_loop = true;
                     break;
                 }
                 if (tmask & carry_mask)
                     qa.mStateMaskInfo.state_masks[i].last_match_idx = j + 1;
                 tmask = tmask << 1;
                 if (last_match_idx == j + 1) tmask = tmask | 1;
             }
             if (skip_loop == true) continue;
             // end quote
             tmask = tmask & ed_quotebit;
             if (tmask == 0 && last_match_idx < key_len + 1) {
                 continue;
             }
             if (tmask & carry_mask)
                 qa.mStateMaskInfo.state_masks[i].last_match_idx = key_len + 1;
             tmask = tmask << 1;
             if (last_match_idx == key_len + 1) tmask = tmask | 1;
             // concecutive blank characters
             if (last_match_idx == key_len + 2) tmask = tmask | 1;
             unsigned long blankbit0, blankbit;
             __m256i v_blank = _mm256_set1_epi8(' ');
             blankbit0 = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_first, v_blank));
             blankbit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_second, v_blank));
             blankbit = (blankbit << 32) | blankbit0;
             tmask = (tmask + blankbit) & (~blankbit);
             if ((blankbit & carry_mask))
                 qa.mStateMaskInfo.state_masks[i].last_match_idx = key_len + 2;
             if (tmask == 0 && last_match_idx < key_len + 2) {
                 continue;
             }
             if (last_match_idx == key_len + 2) tmask = tmask | 1;
             tmask = tmask & colon_bit;
             if (trans_type == KEY) continue;
             if (tmask == 0 && last_match_idx < key_len + 3) {
                 continue;
             }
             if (tmask & carry_mask)
                 qa.mStateMaskInfo.state_masks[i].last_match_idx = key_len + 3;
             tmask = tmask << 1;
             if (last_match_idx == key_len + 3) tmask = tmask | 1;
             // consecutive blank characters
             if (last_match_idx == key_len + 4) tmask = tmask | 1;
             tmask = (tmask + blankbit) & (~blankbit);
             if ((blankbit & carry_mask))
                 qa.mStateMaskInfo.state_masks[i].last_match_idx = key_len + 4;
             if (tmask == 0 && last_match_idx < key_len + 4) {
                 continue;
             }
             if (last_match_idx == key_len + 4) tmask = tmask | 1;
        }
    }
}*/


/*void SerialBitmap::processKeyPriPairsB(QueryAutomaton& qa, __m256i& v_first, __m256i& v_second, long& word_id, unsigned long& st_quotebit, unsigned long& ed_quotebit, unsigned long& colonbit, string& output, long& output_size, long& last_colon_pos, int& temp_state) {
     int trans_idx = 0;
     int cur_idx = qa.mCurState - 1;
     int num_trans_str = qa.mDfa.trans_ele[cur_idx].num_trans_str;
     if (1==2 && num_trans_str == 1) {
     
     } else {
         int trans_idx = 0;
         while (trans_idx < num_trans_str)
         {
             int i = trans_idx;
             ++trans_idx;
             int trans_type = qa.mDfa.trans_ele[cur_idx].t_str_info[i].type;
             int next_state = qa.mDfa.trans_ele[cur_idx].t_str_info[i].next_state;
             if (trans_type != KEY) continue;
             char* key = qa.mDfa.trans_ele[cur_idx].t_str_info[i].key;
             int key_len = qa.mDfa.trans_ele[cur_idx].t_str_info[i].key_len;
             //unsigned long mask = 0;
             int last_match_idx = qa.mStateMaskInfo.state_masks[i].last_match_idx;
             qa.mStateMaskInfo.state_masks[i].last_match_idx = -1;
             unsigned long carry_mask = 1UL<<63;
             // start quote
             unsigned long tmask = st_quotebit;
             if (tmask == 0 && last_match_idx < 0) {
                 continue;
             }
             if (tmask & carry_mask)
                 qa.mStateMaskInfo.state_masks[i].last_match_idx = 0;
             tmask = tmask << 1;
             if (last_match_idx == 0) tmask = tmask | 1;
             // check key field
             bool skip_loop = false;
             for (int j = 0; j < key_len; ++j) {
                 char ch = key[j];
                 __m256i v_ch = _mm256_set1_epi8(ch);
                 unsigned long chbit0, chbit;
                 chbit0 = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_first, v_ch));
                 chbit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_second, v_ch));
                 chbit = (chbit << 32) | chbit0;
                 tmask = tmask & chbit;
                 if (tmask == 0 && last_match_idx < j + 1) {
                     skip_loop = true;
                     break;
                 }
                 if (tmask & carry_mask)
                     qa.mStateMaskInfo.state_masks[i].last_match_idx = j + 1;
                 tmask = tmask << 1;
                 if (last_match_idx == j + 1) tmask = tmask | 1;
             }
             if (skip_loop == true) continue;
             // end quote
             tmask = tmask & ed_quotebit;
             if (tmask == 0 && last_match_idx < key_len + 1) {
                 continue;
             }
             if (tmask & carry_mask)
                 qa.mStateMaskInfo.state_masks[i].last_match_idx = key_len + 1;
             tmask = tmask << 1;
             if (last_match_idx == key_len + 1) tmask = tmask | 1;
             // concecutive blank characters
             if (last_match_idx == key_len + 2) tmask = tmask | 1;
             unsigned long blankbit0, blankbit;
             __m256i v_blank = _mm256_set1_epi8(' ');
             blankbit0 = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_first, v_blank));
             blankbit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_second, v_blank));
             blankbit = (blankbit << 32) | blankbit0;
             tmask = (tmask + blankbit) & (~blankbit);
             if ((blankbit & carry_mask))
                 qa.mStateMaskInfo.state_masks[i].last_match_idx = key_len + 2;
             if (tmask == 0 && last_match_idx < key_len + 2) {
                 continue;
             }
             if (last_match_idx == key_len + 2) tmask = tmask | 1;
             // colon
             tmask = tmask & colonbit;
             if (tmask > 0) {
                 unsigned long temp_mask = tmask;
                 unsigned long matchbit = temp_mask & (-temp_mask);
                 // remove the current matched bit and its prior bits from colon mask
                 unsigned long match_mask = matchbit ^ (matchbit - 1);
                 unsigned long tempbit = colonbit & (~match_mask);
                 // process the matched output
                 if (tempbit) {
                     long offset = (word_id) * 64 + __builtin_ctzll(temp_mask);
                     long next_colon_pos = (word_id) * 64 + __builtin_ctzll(tempbit);
                     long st = -1, ed = -1;
                     findFieldQuotePos(next_colon_pos, st, ed);
                     long text_length = st - offset - 1;
                     char* text = (char*)malloc(text_length + 1);
                     memcpy(text, mRecord + offset + 1, text_length);
                     text[text_length] = '\0';
                     output.append(text);
                     free(text);
                     ++output_size;
                 } else {
                     long offset = (word_id) * 64 + __builtin_ctzll(temp_mask);
                     last_colon_pos = offset;
                     temp_state = next_state;
                     //cout<<"offset "<<offset<<" state "<<temp_state<<endl;
                 }
             } 
            // ++trans_idx;
         }
     }
}*/

/*void SerialBitmap::processKeyBracketB(QueryAutomaton& qa, __m256i& v_first, __m256i& v_second, long& word_id, unsigned long& st_quotebit, unsigned long& ed_quotebit, unsigned long& colonbit, unsigned long lbracketbit, int& bracket_type, bool& match_flag, bool& skip_unmatched_tkn, string& output, long& output_size) {
    int cur_idx = qa.mCurState - 1;
    int num_trans_str = qa.mDfa.trans_ele[cur_idx].num_trans_str;
    if (1==2 && num_trans_str == 1) {

    } else {
        for (int i = 0; i < num_trans_str; ++i) {
            int trans_type = qa.mDfa.trans_ele[cur_idx].t_str_info[i].type;
            int next_state = qa.mDfa.trans_ele[cur_idx].t_str_info[i].next_state;
            if (trans_type == bracket_type) {
                if (next_state != UNMATCHED_STATE || skip_unmatched_tkn == false) {
                    qa.pushStack(next_state);
                    match_flag = true;
                    qa.mStateMaskInfo.state_masks[i].last_match_idx = -1;
                }
            }
            else 
            {
                char* key = qa.mDfa.trans_ele[cur_idx].t_str_info[i].key;
                int key_len = qa.mDfa.trans_ele[cur_idx].t_str_info[i].key_len;
                int last_match_idx = qa.mStateMaskInfo.state_masks[i].last_match_idx;
                qa.mStateMaskInfo.state_masks[i].last_match_idx = -1;
                unsigned long carry_mask = 1UL<<63;
                // start quote
                unsigned long tmask = st_quotebit;
                if (tmask == 0 && last_match_idx < 0) {
                    match_flag = false;
                    continue;
                }
                if (tmask & carry_mask)
                    qa.mStateMaskInfo.state_masks[i].last_match_idx = 0;
                tmask = tmask << 1;
                if (last_match_idx == 0) tmask = tmask | 1;
                // check key field
                bool skip_loop = false;
                for (int j = 0; j < key_len; ++j) {
                    char ch = key[j];
                    __m256i v_ch = _mm256_set1_epi8(ch);
                    unsigned long chbit0, chbit;
                    chbit0 = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_first, v_ch));
                    chbit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_second, v_ch));
                    chbit = (chbit << 32) | chbit0;
                    tmask = tmask & chbit;
                    if (tmask == 0 && last_match_idx < j + 1) {
                        skip_loop = true;
                        break;
                    }
                    if (tmask & carry_mask)
                        qa.mStateMaskInfo.state_masks[i].last_match_idx = j + 1;
                    tmask = tmask << 1;
                    if (last_match_idx == j + 1) tmask = tmask | 1;
                }
                if (skip_loop == true) continue;
                // end quote
                tmask = tmask & ed_quotebit;
                if (tmask == 0 && last_match_idx < key_len + 1) {
                    continue;
                }
                if (tmask & carry_mask)
                    qa.mStateMaskInfo.state_masks[i].last_match_idx = key_len + 1;
                tmask = tmask << 1;
                if (last_match_idx == key_len + 1) tmask = tmask | 1;
                // concecutive blank characters
                if (last_match_idx == key_len + 2) tmask = tmask | 1;
                unsigned long blankbit0, blankbit;
                __m256i v_blank = _mm256_set1_epi8(' ');
                blankbit0 = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_first, v_blank));
                blankbit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_second, v_blank));
                blankbit = (blankbit << 32) | blankbit0;
                tmask = (tmask + blankbit) & (~blankbit);
                if ((blankbit & carry_mask))
                    qa.mStateMaskInfo.state_masks[i].last_match_idx = key_len + 2;
                if (tmask == 0 && last_match_idx < key_len + 2) {
                    continue;
                }
                if (last_match_idx == key_len + 2) tmask = tmask | 1;
                // colon
                tmask = tmask & colonbit;
                if (trans_type == KEY) {// || lbracketbit == 0) {
                    if (tmask > 0) {
                        unsigned long temp_mask = tmask;
                        unsigned long matchbit = temp_mask & (-temp_mask);
                        // remove the current matched bit and its prior bits from colon mask
                        unsigned long match_mask = matchbit ^ (matchbit - 1);
                        unsigned long tempbit = colonbit & (~match_mask);
                        // process the matched output
                        if (tempbit) {
                            long offset = (word_id) * 64 + __builtin_ctzll(temp_mask);
                            long next_colon_pos = (word_id) * 64 + __builtin_ctzll(tempbit);
                            long st = -1, ed = -1;
                            findFieldQuotePos(next_colon_pos, st, ed);
                            long text_length = st - offset - 1;
                            char* text = (char*)malloc(text_length + 1);
                            memcpy(text, mRecord + offset + 1, text_length);
                            text[text_length] = '\0';
                            output.append(text);
                            //  cout<<"text "<<text<<endl;
                            free(text);
                            ++output_size;
                        }
                        //cout<<"matched "<<endl;
                    }
                    continue;
                }
                if (tmask == 0 && last_match_idx < key_len + 3) {
                    continue;
                }
                if (tmask & carry_mask)
                    qa.mStateMaskInfo.state_masks[i].last_match_idx = key_len + 3;
                tmask = tmask << 1;
                if (last_match_idx == key_len + 3) tmask = tmask | 1;
                // consecutive blank characters
                if (last_match_idx == key_len + 4) tmask = tmask | 1;
                tmask = (tmask + blankbit) & (~blankbit);
                if ((blankbit & carry_mask))
                    qa.mStateMaskInfo.state_masks[i].last_match_idx = key_len + 4;
                if (tmask == 0 && last_match_idx < key_len + 4) {
                        continue;
                }
                if (last_match_idx == key_len + 4) tmask = tmask | 1;
                // left brace or left bracket
                tmask = tmask & lbracketbit;
                if (tmask > 0) {
                    if (next_state != UNMATCHED_STATE || skip_unmatched_tkn == false) {
                        qa.pushStack(next_state);
                        match_flag = true;
                    }
                }
            }
        }
    }
}*/

void SerialBitmap::indexConstruction() {
    struct timeval begin,end;
    double duration;
    gettimeofday(&begin,NULL);
    // vectors for structural characters
    __m256i v_quote = _mm256_set1_epi8(0x22);
    __m256i v_colon = _mm256_set1_epi8(0x3a);
    __m256i v_escape = _mm256_set1_epi8(0x5c);
    __m256i v_lbrace = _mm256_set1_epi8(0x7b);
    __m256i v_rbrace = _mm256_set1_epi8(0x7d);
    __m256i v_comma = _mm256_set1_epi8(0x2c); 
    __m256i v_lbracket = _mm256_set1_epi8(0x5b);
    __m256i v_rbracket = _mm256_set1_epi8(0x5d);
	
    // variables for saving temporary results in the first four steps
    unsigned long colonbit0, quotebit0, escapebit0, stringbit0, lbracebit0, rbracebit0, commabit0, lbracketbit0, rbracketbit0;
    unsigned long colonbit, quotebit, escapebit, stringbit, lbracebit, rbracebit, commabit, lbracketbit, rbracketbit;
    unsigned long str_mask;
	
    // variables for saving temporary results in the last step
    unsigned long lb_mask, rb_mask, cb_mask;
    unsigned long lb_bit, rb_bit, cb_bit;
    unsigned long first, second;
    int cur_level = -1;
    int max_positive_level = -1;
	
    // variables for saving context information among different words
    long top_word = -1;
    uint64_t prev_iter_ends_odd_backslash = 0ULL;
    uint64_t prev_iter_inside_quote = 0ULL;
    const uint64_t even_bits = 0x5555555555555555ULL;
    const uint64_t odd_bits = ~even_bits; 
    long last_colon_pos = -1;
    long last_comma_pos = -1;
    bool skip_key = false;
    bool skip_follow_key = false;
    bool key_matched = true;
    int reset_level = -1;
    bool m_stack[100];
    int top_m_stack = -1;
    char* content = new char[1000000];
//    cout<<"enter into execution "<<mDepth<<endl;
    string output;
    long output_size = 0;
    int cnt = 0;
    int temp_cnt = 0;
//    cout<<"create an automaton instance"<<endl;
    QueryAutomaton qa;// = new QueryAutomaton();
//    cout<<"initialize an automaton"<<endl;
    qa.init();
//    cout<<"generate an automaton"<<endl;
    generateAutomaton(qa);
//    cout<<"finish automaton generation"<<endl;
    bool skip_unmatched_tkn = true;
    bool skip_arr_ele = false;
    // for debug only
    int skipped_arr_ele = 0;
    __m256i v_text0, v_text, prev_v_first, prev_v_second;
    int temp_state = 0;
    StateMask state_mask;
    /*struct timeval begin,end;
    double duration;
    gettimeofday(&begin,NULL);*/
    bool last_wait = false;
    unsigned long prev_st_quotebit = 0;
    unsigned long prev_ed_quotebit = 0;
    unsigned long prev_colonbit = 0;

    for (long j = 0; j < mNumTmpWords; ++j) {
        colonbit = 0, quotebit = 0, escapebit = 0, stringbit = 0, lbracebit = 0, rbracebit = 0, commabit = 0, lbracketbit = 0, rbracketbit = 0;
        unsigned long i = j * 32;
        if (j > 0) v_text0 = v_text;
        // step 1: build structural character bitmaps
        v_text = _mm256_loadu_si256(reinterpret_cast<const __m256i *>(mRecord + i));
        colonbit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_colon));
        quotebit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_quote)); 
        escapebit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_escape)); 
        lbracebit  = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_lbrace));
        rbracebit  = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_rbrace));
        commabit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_comma));
	lbracketbit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_lbracket));
	rbracketbit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_rbracket));
        // first half of the word (lowest 32 bits)
        if(j % 2 == 0) {
            colonbit0 = colonbit;
            quotebit0 = quotebit;
            escapebit0 = escapebit;
            lbracebit0 = lbracebit;
            rbracebit0 = rbracebit;
            commabit0 = commabit;
            lbracketbit0 = lbracketbit;
            rbracketbit0 = rbracketbit;
            continue;
        } else {
            // highest 32 bits inside a word
            colonbit = (colonbit << 32) | colonbit0;
            quotebit = (quotebit << 32) | quotebit0;
            escapebit = (escapebit << 32) | escapebit0;
            lbracebit = (lbracebit << 32) | lbracebit0;
            rbracebit = (rbracebit << 32) | rbracebit0;
            commabit = (commabit << 32) | commabit0;
            lbracketbit = (lbracketbit << 32) | lbracketbit0;
            rbracketbit = (rbracketbit << 32) | rbracketbit0;

            // step 2: update structural quote bitmaps
            uint64_t bs_bits = escapebit;
            uint64_t start_edges = bs_bits & ~(bs_bits << 1);
            int64_t even_start_mask = even_bits ^ prev_iter_ends_odd_backslash;
            uint64_t even_starts = start_edges & even_start_mask;
            uint64_t odd_starts = start_edges & ~even_start_mask;
            uint64_t even_carries = bs_bits + even_starts;
            int64_t odd_carries;
            bool iter_ends_odd_backslash = __builtin_uaddll_overflow(bs_bits, odd_starts,
                (unsigned long long *)(&odd_carries));
            odd_carries |= prev_iter_ends_odd_backslash;
            prev_iter_ends_odd_backslash = iter_ends_odd_backslash ? 0x1ULL : 0x0ULL;
            uint64_t even_carry_ends = even_carries & ~bs_bits;
            uint64_t odd_carry_ends = odd_carries & ~bs_bits;
            uint64_t even_start_odd_end = even_carry_ends & odd_bits;
            uint64_t odd_start_even_end = odd_carry_ends & even_bits;
            uint64_t odd_ends = even_start_odd_end | odd_start_even_end;
            int64_t quote_bits = quotebit & ~odd_ends;
            mQuoteBitmap[++top_word] = quote_bits;
        
            // step 3: build string mask bitmaps
            str_mask = _mm_cvtsi128_si64(_mm_clmulepi64_si128(
                _mm_set_epi64x(0ULL, quote_bits), _mm_set1_epi8(0xFFu), 0));
            str_mask ^= prev_iter_inside_quote;
            prev_iter_inside_quote = static_cast<uint64_t>(static_cast<int64_t>(str_mask) >> 63);
            // get bitmaps for bitmap matching
            unsigned long st_quotebit = quote_bits & str_mask;
            unsigned long ed_quotebit = quote_bits & (~st_quotebit);	

            // step 4: update structural character bitmaps
            unsigned long tmp = (~str_mask);
            colonbit = colonbit & tmp;
            lbracebit = lbracebit & tmp;
            rbracebit = rbracebit & tmp;
            commabit = commabit & tmp;
            lbracketbit = lbracketbit & tmp;
            rbracketbit = rbracketbit & tmp;
	
            // step 5: generate leveled bitmaps
            //if (mArraySupported) {
                lb_mask = lbracebit | lbracketbit;
                rb_mask = rbracebit | rbracketbit;
            /*} else {
                lb_mask = lbracebit;
                rb_mask = rbracebit;
            }*/
            cb_mask = lb_mask | rb_mask;
            lb_bit = lb_mask & (-lb_mask);
            rb_bit = rb_mask & (-rb_mask);
            if (!cb_mask) {
                if (temp_cnt == 0 || skip_unmatched_tkn == false) {
                    if (colonbit) {
                        // previous interval is not a part of array members
                        last_comma_pos = -1;
                        if (last_colon_pos > -1) {
                            // process the last key field in previous word
                            if (temp_state > 0 && qa.getType(temp_state) == OUTPUT_CANDIDATE) {
                                if (qa.getType(temp_state) == OUTPUT_CANDIDATE) {
                                    // get the next colon position for the last key field
                                    long offset = (top_word) * 64 + __builtin_ctzll(colonbit);
                                    long st = -1, ed = -1;
                                   // st = offset;
                                    findFieldQuotePos(offset, st, ed);
                                    long text_length = st - last_colon_pos - 1;
                                    memcpy(content, mRecord + last_colon_pos + 1, text_length);
                                    content[text_length] = '\0';
                                    output.append(content);
                                   // cout<<"content "<<content<<" length "<<text_length<<endl;
                                    ++output_size;
                                }
                            }
                        }
                        last_colon_pos = -1;
                        // find matched bitmap for the current word (interval)
                        if (qa.mCurState == UNMATCHED_STATE) {
                            continue; 
                        }
                        else if (qa.hasMatchedKeyType(KEY)) {
                            last_wait = false;
                            unsigned long no_bracketbit = 0;
                            processKeyPriPairsB(qa, v_text0, v_text, top_word, st_quotebit, ed_quotebit, colonbit, output, output_size, last_colon_pos, temp_state);
                            int trans_idx = 0;
                            while (1==2 && trans_idx < qa.mDfa.trans_ele[qa.mCurState - 1].num_trans_str)
                            {
                                bool flag = qa.findMatchedBitmapFromKey2(trans_idx, mRecord + i - 32, st_quotebit, ed_quotebit, colonbit, no_bracketbit);
                                if (flag == true) {
                                    unsigned long temp_mask = qa.mStateMask.mask;
                                    long offset = (top_word) * 64 + __builtin_ctzll(temp_mask);
                                    // find the colon position for the next consecutive key field (from colonbit)
                                    // extract the current matched bit
                                    unsigned long matchbit = temp_mask & (-temp_mask);
                                    // remove the current matched bit and its prior bits from colon mask
                                    unsigned long match_mask = matchbit ^ (matchbit - 1);
                                    unsigned long tempbit = colonbit & (~match_mask);
                                    // process the matched output
                                    if (tempbit) {
                                    // if (state_type == OUTPUT_CANDIDATE) {
                                        long next_colon_pos = (top_word) * 64 + __builtin_ctzll(tempbit);
                                        long st = -1, ed = -1;
                                        findFieldQuotePos(next_colon_pos, st, ed);
                                  //  st = next_colon_pos;
                                        long text_length = st - offset - 1;
                                        //char* text = (char*)malloc(text_length + 1);
                                        memcpy(content, mRecord + offset + 1, text_length);
                                   //     text[text_length] = '\0';
                                        // cout<<"text "<<text<<endl;
                                        output.append(content);
                                        //cout<<"text "<<text<<endl;
                                     //   free(text);
                                        ++output_size;
                                    } else {
                                        // colon in state_mask.mask must be the last one
                                        last_colon_pos = offset;
                                        temp_state = qa.mStateMask.state;
                                    }
                                }
                                ++trans_idx;
                            }
                        } else {
                            last_wait = true;
                            prev_st_quotebit = st_quotebit;
                            prev_ed_quotebit = ed_quotebit;
                            prev_colonbit = colonbit;
                   //         cout<<"skip "<<endl;
                             //prev_v_first = v_text0;
                             //prev_v_second = v_text;
                        }
                    } else {
                        if (qa.mCurState == UNMATCHED_STATE) {
                            continue;
                        }
                        else if (qa.hasMatchedKeyType(KEY)) {
                            last_wait = false;
                            unsigned long no_bracketbit = 0;
                            //processNoBracketInterval(qa, mRecord + i - 32, st_quotebit, ed_quotebit, colonbit);
                            int trans_idx = 0;
                            int num_trans = qa.mDfa.trans_ele[qa.mCurState - 1].num_trans_str;
                            //processKeyPriPairsB(qa, v_text0, v_text, top_word, st_quotebit, ed_quotebit, colonbit, output, output_size, last_colon_pos, temp_state);
                            while (trans_idx < num_trans) {
                            //while (qa.hasNextTransTkn(trans_idx)) {
                                qa.findMatchedBitmapFromKey2(trans_idx, mRecord + i - 32, st_quotebit, ed_quotebit, colonbit, no_bracketbit); 
                                ++trans_idx;
                            }
                            //qa.findMatchedBitmapFromKey1(mRecord + i - 32, st_quotebit, ed_quotebit, colonbit, no_bracketbit);
                        } else {
                            last_wait = true;
                            prev_st_quotebit = st_quotebit;
                            prev_ed_quotebit = ed_quotebit;
                            prev_colonbit = colonbit;
                            //prev_v_first = v_text0;
                            //prev_v_second = v_text;
                     //       cout<<"skip "<<endl;
                        }
                        //state_mask = qa.getMatchedBitmap(mRecord + i - 32, st_quotebit, ed_quotebit, colonbit, no_bracketbit);
                        // processNoKeyInterval(qa, v_text0, v_text, st_quotebit, ed_quotebit, colonbit);
                        processCandidateArrayInterval(qa, top_word, commabit, last_comma_pos, skip_arr_ele);
	            }
	        }
            } else {
                first = 1;
                while (cb_mask || first) {
                    if (!cb_mask) {
                        cb_bit = 0;
                        second = 1UL<<63;
                    } else {
                        cb_bit = cb_mask & (-cb_mask);
                        second = cb_bit;
                    }
                    // (temp_cnt == 0 && skip_arr_ele == true)
                    if ((temp_cnt > 0 ) && skip_unmatched_tkn == true) {
                        if (cb_mask) {
                            // cout<<"temp cnt "<<temp_cnt<<" stack size "<<qa.getStackSize()<<" cur state "<<qa.mCurState<<endl;
                            if (cb_bit & lb_mask) {
                                ++temp_cnt;
                            }
                            else {
                                --temp_cnt;
                                if (temp_cnt == 0) {
                                    skip_arr_ele = false;
                                }
                            }
                        //    if(temp_cnt == 0) cout<<"skip temp cnt "<<temp_cnt<<" "<<top_word<<endl;
                            // else cout<<"we don't know"<<cb_bit<<endl; 
                        }
                    } else {
                        unsigned long mask = second - first;
                        if (!cb_mask) mask = mask | second;
                        unsigned long colon_mask = mask & colonbit;
                        if (last_colon_pos > -1 && colon_mask) {
                            // process the last key field in previous word
                            if (temp_state > 0 && qa.getType(temp_state) == OUTPUT_CANDIDATE) {
                                if (qa.getType(temp_state) == OUTPUT_CANDIDATE) {
                                    // get the next colon position for the last key field
                                    long offset = (top_word) * 64 + __builtin_ctzll(colon_mask);
                                    long st = -1, ed = -1;
                                   findFieldQuotePos(offset, st, ed);
                                    // st = offset;
                                    long text_length = st - last_colon_pos - 1;
                                    memcpy(content, mRecord + last_colon_pos + 1, text_length);
                                    content[text_length] = '\0';
                                    // cout<<"content "<<content<<endl;
                                    output.append(content);
                                    ++output_size;
                                }
                            }
                            last_colon_pos = -1; 
                        }
                        // if (cb_mask) last_colon_pos = -1;
                        if (cb_bit & lb_mask) {
                            unsigned long l_bracketbit = cb_bit & lb_mask;
                            unsigned long st_quotebit_mask = st_quotebit & mask;
                            unsigned long ed_quotebit_mask = ed_quotebit & mask;
                            bool matched = false;
                            int type = OBJECT;
                            if (cb_bit & lbracketbit) type = ARRAY;
                            bool condition1 = (type == OBJECT && (qa.hasMatchedKeyType(KEY_OBJECT) || qa.hasMatchedKeyType(OBJECT)));
                            bool condition2 = (type == ARRAY && (qa.hasMatchedKeyType(KEY_ARRAY) || qa.hasMatchedKeyType(ARRAY)));
                        //    bool condition3 = (type == OBJECT && qa.hasMatchedKeyType(KEY_OBJECT) && !qa.hasMatchedKeyType(OBJECT));
                        //    bool condition4 = (type == ARRAY && qa.hasMatchedKeyType(KEY_ARRAY) && !qa.hasMatchedKeyType(ARRAY)); 
                            //if (condition1 || condition2)
                            //if (qa.mCurState != UNMATCHED_STATE) 
                           // {
                            if (last_wait == true) {
                            //if (qa.mCurState != UNMATCHED_STATE && (condition1 || condition2) && last_wait == true) {
                                int cnt = 0;
                                unsigned long temp_colon_mask = colon_mask;
                                while (temp_colon_mask) {
                                    ++cnt;
                                    if (cnt > 1) break;
                                    temp_colon_mask = temp_colon_mask & (temp_colon_mask - 1);
                                }
                                last_wait = false;
                                /*if (cnt == 0 && (condition3 || condition4)) {
                                   unsigned long temp_cbit = colon_mask ^ (colon_mask - 1);
                                    if (!((temp_cbit & st_quotebit_mask) && (temp_cbit & ed_quotebit_mask))) {
                                        unsigned long no_bracketbit = 0;
                      //                  cout<<"recover "<<endl;
                                        qa.findMatchedBitmapFromKey1(mRecord + i - 96, prev_st_quotebit, prev_ed_quotebit, prev_colonbit, no_bracketbit);
                                        // state_mask = qa.getMatchedBitmap(mRecord + i - 96, prev_st_quotebit, prev_ed_quotebit, prev_colonbit, no_bracketbit);
                                        last_wait = false;
                                    }
                                }
                                else*/ 
                                if (cnt <= 1) {
                                    unsigned long temp_cbit = colon_mask ^ (colon_mask - 1);
                                    if (!((temp_cbit & st_quotebit_mask) && (temp_cbit & ed_quotebit_mask))) {
                                        unsigned long no_bracketbit = 0;
                      //                  cout<<"recover "<<endl;
                                        //processNoBracketInterval(qa, mRecord + i - 96, prev_st_quotebit, prev_ed_quotebit, prev_colonbit);
                                        //qa.findMatchedBitmapFromKey1(mRecord + i - 96, prev_st_quotebit, prev_ed_quotebit, prev_colonbit, no_bracketbit);
                                        int trans_idx = 0;
                                        int num_trans = qa.mDfa.trans_ele[qa.mCurState - 1].num_trans_str;
                                        while (trans_idx < num_trans) {
                                        //while (qa.hasNextTransTkn(trans_idx)) {
                                            qa.findMatchedBitmapFromKey2(trans_idx, mRecord + i - 96, prev_st_quotebit, prev_ed_quotebit, prev_colonbit, no_bracketbit);
                                            ++trans_idx;
                                        }
                                        // state_mask = qa.getMatchedBitmap(mRecord + i - 96, prev_st_quotebit, prev_ed_quotebit, prev_colonbit, no_bracketbit);
                                        last_wait = false;
                                    }
                                }
                            } else last_wait = false;
                            //bool matched = false;
                            if (qa.mCurState != UNMATCHED_STATE) {
                                //processKeyBracketB(qa, v_text0, v_text, top_word, st_quotebit_mask, ed_quotebit_mask, colon_mask, cb_bit, type, matched, skip_unmatched_tkn, output, output_size);
                                // !!!!! reimplementation
                                int cur_idx = qa.mCurState - 1;
                                int num_trans_str = qa.mDfa.trans_ele[cur_idx].num_trans_str;
                                matched = false; 
                                unsigned long carry_mask = 1UL<<63;
                                for (int i = 0; i < num_trans_str; ++i) {//num_trans_str; ++i) {
                                    int trans_type = qa.mDfa.trans_ele[cur_idx].t_str_info[i].type;
                                    int next_state = qa.mDfa.trans_ele[cur_idx].t_str_info[i].next_state;
                                    if (trans_type == type) {
                                        if (next_state != UNMATCHED_STATE || skip_unmatched_tkn == false) {
                                            qa.pushStack(next_state);
                                            matched = true;
                                            qa.mStateMaskInfo.state_masks[i].last_match_idx = -1;
                                            //break;
                                        }
                                    } else {
                                        char* key = qa.mDfa.trans_ele[cur_idx].t_str_info[i].key;
                                        int key_len = qa.mDfa.trans_ele[cur_idx].t_str_info[i].key_len;
                              //          if (cur_idx == 2 && type == ARRAY) cout<<"key "<<key<<" type "<<trans_type<<" next state "<<next_state<<" "<<i<<" "<<type<<endl;
                                        //if (cur_idx == 2 && next_state == 10) mark_next_state = true;
                                        unsigned long mask = 0;
                                        int last_match_idx = qa.mStateMaskInfo.state_masks[i].last_match_idx;
                                        qa.mStateMaskInfo.state_masks[i].last_match_idx = -1;
                                   //     unsigned long carry_mask = 1UL<<63;
                                        // start quote
                                        unsigned long tmask = st_quotebit_mask;
                                        if (tmask == 0 && last_match_idx < 0) {
                                         //   matched = false;
                                            continue;
                                        }
                                        if (tmask & carry_mask)
                                            qa.mStateMaskInfo.state_masks[i].last_match_idx = 0;
                                        tmask = tmask << 1;
                                        if (last_match_idx == 0) tmask = tmask | 1;
                                        // check key field
                                        bool skip_loop = false;
                                        for (int j = 0; j < key_len; ++j) {
                                            char ch = key[j];
                                            __m256i v_ch = _mm256_set1_epi8(ch);
                                            unsigned long chbit0, chbit;
                                            chbit0 = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text0, v_ch));
                                            chbit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_ch));
                                            chbit = (chbit << 32) | chbit0;
                                            tmask = tmask & chbit;
                                            if (tmask == 0 && last_match_idx < j + 1) {
                                                skip_loop = true;
                                               // if (cur_idx == 8) cout<<"skip at "<<j<<" "<<ch<<endl;
                                                break;
                                            }
                                            if (tmask & carry_mask)
                                                qa.mStateMaskInfo.state_masks[i].last_match_idx = j + 1;
                                            tmask = tmask << 1;
                                             if (last_match_idx == j + 1) tmask = tmask | 1;
                                        }
                                        if (skip_loop == true) continue;
                                        // end quote
                                        tmask = tmask & ed_quotebit_mask;
                                        if (tmask == 0 && last_match_idx < key_len + 1) {
                                            continue;
                                        }
                                        if (tmask & carry_mask)
                                            qa.mStateMaskInfo.state_masks[i].last_match_idx = key_len + 1;
                                        tmask = tmask << 1;
                                        if (last_match_idx == key_len + 1) tmask = tmask | 1;
                                        // concecutive blank characters
                                        if (last_match_idx == key_len + 2) tmask = tmask | 1;
                                        unsigned long blankbit0, blankbit;
                                        __m256i v_blank = _mm256_set1_epi8(' ');
                                        blankbit0 = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text0, v_blank));
                                        blankbit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_blank));
                                        blankbit = (blankbit << 32) | blankbit0;
                                        tmask = (tmask + blankbit) & (~blankbit);
                                        if ((blankbit & carry_mask))
                                            qa.mStateMaskInfo.state_masks[i].last_match_idx = key_len + 2;
                                        if (tmask == 0 && last_match_idx < key_len + 2) {
                                            continue;
                                        }
                                        if (last_match_idx == key_len + 2) tmask = tmask | 1;
                                        // colon
                                        tmask = tmask & colon_mask;
                                        if (trans_type == KEY){// || lbracketbit == 0) {
                                            if (tmask > 0) {
                                                unsigned long temp_mask = tmask;
                                                unsigned long matchbit = temp_mask & (-temp_mask);
                                                // remove the current matched bit and its prior bits from colon mask
                                                unsigned long match_mask = matchbit ^ (matchbit - 1);
                                                unsigned long tempbit = colon_mask & (~match_mask);
                                                // process the matched output
                                                if (tempbit) {
                                                    long offset = (top_word) * 64 + __builtin_ctzll(temp_mask);
                                                    long next_colon_pos = (top_word) * 64 + __builtin_ctzll(tempbit);
                                                    long st = -1, ed = -1;
                                                    findFieldQuotePos(next_colon_pos, st, ed);
                                                    long text_length = st - offset - 1;
                                                  //  char* text = (char*)malloc(text_length + 1);
                                                    memcpy(content, mRecord + offset + 1, text_length);
                                                  //  text[text_length] = '\0';
                                                    output.append(content);
                                                  //  cout<<"text "<<text<<endl;
                                                //    free(text);
                                                    ++output_size;
                                                }
                                                //cout<<"matched "<<endl;
                                            }
                                            continue;
                                        }
                                        if (tmask == 0 && last_match_idx < key_len + 3) {
                                            continue;
                                        }
                                        if (tmask & carry_mask)
                                            qa.mStateMaskInfo.state_masks[i].last_match_idx = key_len + 3;
                                        tmask = tmask << 1;
                                        if (last_match_idx == key_len + 3) tmask = tmask | 1;
                                        // consecutive blank characters
                                        if (last_match_idx == key_len + 4) tmask = tmask | 1;
                                        tmask = (tmask + blankbit) & (~blankbit);
                                        if ((blankbit & carry_mask))
                                            qa.mStateMaskInfo.state_masks[i].last_match_idx = key_len + 4;
                                        if (tmask == 0 && last_match_idx < key_len + 4) {
                                            continue;
                                        }
                                        if (last_match_idx == key_len + 4) tmask = tmask | 1;
                                        // left brace or left bracket
                                        tmask = tmask & cb_bit;
                                        if (tmask > 0) {
                                            if (next_state != UNMATCHED_STATE || skip_unmatched_tkn == false) {
                                                //if (qa.mCurState == 3) cout<<"pushy key "<<key<<" type "<<trans_type<<" next state "<<next_state<<" "<<num_trans_str<<" i "<<i<<endl;
                                                qa.pushStack(next_state);
                                                matched = true;
                                            }
                                        }
                                    }
                                }
                            }
                            if (matched == false) {
                                ++temp_cnt;
                            }
                         //   if (matched == false) qa.pushStack(0);
                            last_colon_pos = -1;
                            last_wait = false;
                        } else if (cb_bit & rb_mask) {
                            if (last_comma_pos > -1 && (cb_bit & rbracketbit)) {
                                processArrayMember(qa, last_comma_pos, skip_arr_ele);
                            }
                            last_comma_pos = -1;
                            if (last_colon_pos > -1) {
                                // process the last key field in previous word
                                if (qa.getType(temp_state) == OUTPUT_CANDIDATE) {
                                    // get the next colon position for the last key field
                                    long offset = (top_word) * 64 + __builtin_ctzll(cb_bit);
                                    long st = offset, ed = -1;
                                    long text_length = st - last_colon_pos - 1;
                                    memcpy(content, mRecord + last_colon_pos + 1, text_length);
                                    content[text_length] = '\0';
                                    //cout<<"content "<<content<<endl;
                                    output.append(content);
                                    ++output_size;
                                }
                                last_colon_pos = -1;
                            }
                            if (qa.mCurState != UNMATCHED_STATE && qa.hasMatchedKeyType(KEY)) { 
                                unsigned long no_bracketbit = 0;
                                unsigned long st_quotebit_mask = st_quotebit & mask;
                                unsigned long ed_quotebit_mask = ed_quotebit & mask;
                                int trans_idx = 0;
                                int cur_idx = qa.mCurState - 1;
                                //while (qa.hasNextTransTkn(trans_idx)) 
                                int num_trans_str = qa.mDfa.trans_ele[cur_idx].num_trans_str;

                                while (trans_idx < num_trans_str)
                                    {
                                        // reimplementation3
                                        int i = trans_idx;
                                        ++trans_idx;
                                        int trans_type = qa.mDfa.trans_ele[cur_idx].t_str_info[i].type;
                                        int next_state = qa.mDfa.trans_ele[cur_idx].t_str_info[i].next_state;
                                        if (trans_type != KEY) continue;
                                        char* key = qa.mDfa.trans_ele[cur_idx].t_str_info[i].key;
                                        int key_len = qa.mDfa.trans_ele[cur_idx].t_str_info[i].key_len;
                                        unsigned long mask = 0;
                                        int last_match_idx = qa.mStateMaskInfo.state_masks[i].last_match_idx;
                                        qa.mStateMaskInfo.state_masks[i].last_match_idx = -1;
                                        unsigned long carry_mask = 1UL<<63;
                                        // start quote
                                        unsigned long tmask = st_quotebit_mask;
                                        if (tmask == 0 && last_match_idx < 0) {
                                            //matched = false;
                                            continue;
                                        }
                                        if (tmask & carry_mask)
                                            qa.mStateMaskInfo.state_masks[i].last_match_idx = 0;
                                        tmask = tmask << 1;
                                        if (last_match_idx == 0) tmask = tmask | 1;
                                        // check key field
                                        bool skip_loop = false;
                                        for (int j = 0; j < key_len; ++j) {
                                            char ch = key[j];
                                            __m256i v_ch = _mm256_set1_epi8(ch);
                                            unsigned long chbit0, chbit;
                                            chbit0 = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text0, v_ch));
                                            chbit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_ch));
                                            chbit = (chbit << 32) | chbit0;
                                            tmask = tmask & chbit;
                                            if (tmask == 0 && last_match_idx < j + 1) {
                                                skip_loop = true;
                                                break;
                                            }
                                            if (tmask & carry_mask)
                                                qa.mStateMaskInfo.state_masks[i].last_match_idx = j + 1;
                                            tmask = tmask << 1;
                                             if (last_match_idx == j + 1) tmask = tmask | 1;
                                        }
                                         if (skip_loop == true) continue;
                                        // end quote
                                        tmask = tmask & ed_quotebit_mask;
                                        if (tmask == 0 && last_match_idx < key_len + 1) {
                                            continue;
                                        }
                                        if (tmask & carry_mask)
                                            qa.mStateMaskInfo.state_masks[i].last_match_idx = key_len + 1;
                                        tmask = tmask << 1;
                                        if (last_match_idx == key_len + 1) tmask = tmask | 1;
                                        // concecutive blank characters
                                        if (last_match_idx == key_len + 2) tmask = tmask | 1;
                                        unsigned long blankbit0, blankbit;
                                        __m256i v_blank = _mm256_set1_epi8(' ');
                                        blankbit0 = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text0, v_blank));
                                        blankbit = (unsigned)_mm256_movemask_epi8(_mm256_cmpeq_epi8(v_text, v_blank));
                                        blankbit = (blankbit << 32) | blankbit0;
                                        tmask = (tmask + blankbit) & (~blankbit);
                                        if ((blankbit & carry_mask))
                                            qa.mStateMaskInfo.state_masks[i].last_match_idx = key_len + 2;
                                        if (tmask == 0 && last_match_idx < key_len + 2) {
                                            continue;
                                        }
                                        if (last_match_idx == key_len + 2) tmask = tmask | 1;
                                        // colon
                                        tmask = tmask & colon_mask;
                                        if (trans_type == KEY){// || lbracketbit == 0) {
                                            if (tmask > 0) {
                                                unsigned long temp_mask = tmask;
                                                unsigned long matchbit = temp_mask & (-temp_mask);
                                                // remove the current matched bit and its prior bits from colon mask
                                                unsigned long match_mask = matchbit ^ (matchbit - 1);
                                                unsigned long tempbit = colon_mask & (~match_mask);
                                                // process the matched output
                                                if (tempbit) {
                                                    long offset = (top_word) * 64 + __builtin_ctzll(temp_mask);
                                                    long next_colon_pos = (top_word) * 64 + __builtin_ctzll(tempbit);
                                                    long st = -1, ed = -1;
                                                    findFieldQuotePos(next_colon_pos, st, ed);
                                                    long text_length = st - offset - 1;
                                                    memcpy(content, mRecord + offset + 1, text_length);
                                                    content[text_length] = '\0';
                                                    output.append(content);
                                                    //cout<<"content "<<content<<endl;
                                                 //   free(text);
                                                    ++output_size;
                                                }
                                            }
                                        }
                                        ++trans_idx;
                                    }
                               //  unsigned long colon_brace_mask = colon_mask;
                                //processKeyPriPairsB(qa, v_text0, v_text, top_word, st_quotebit_mask, ed_quotebit_mask, colon_brace_mask, output, output_size, last_colon_pos, temp_state);                            
                                if (1==2 && last_colon_pos > -1) {
                                    // cout<<"special colon pos "<<last_colon_pos<<endl;
                                    // process the last key field in previous word
                                    if (qa.getType(temp_state) == OUTPUT_CANDIDATE) {
                                        // get the next colon position for the last key field
                                        long offset = (top_word) * 64 + __builtin_ctzll(cb_bit);
                                        long st = offset, ed = -1;
                                        long text_length = st - last_colon_pos - 1;
                                        memcpy(content, mRecord + last_colon_pos + 1, text_length);
                                        content[text_length] = '\0';
                                        //cout<<"content "<<content<<endl;
                                        output.append(content);
                                        ++output_size;
                                    }
                                last_colon_pos = -1;
                            }

                            }
                            //state_mask = qa.getMatchedBitmap(mRecord + i - 32, st_quotebit_mask, ed_quotebit_mask, colon_mask, no_bracketbit);
                            processCloseBracket(qa, skip_arr_ele);
                        } else if (qa.mCurState != UNMATCHED_STATE && qa.hasMatchedKeyType(KEY)) {
                            unsigned long st_quotebit_mask = st_quotebit & mask;
                            unsigned long ed_quotebit_mask = ed_quotebit & mask;
                            unsigned long no_bracketbit = 0;
                            //processKeyPriPairsB(qa, v_text0, v_text, top_word, st_quotebit_mask, ed_quotebit_mask, colonbit, output, output_size, last_colon_pos, temp_state);
                            int num_trans_str = qa.mDfa.trans_ele[qa.mCurState - 1].num_trans_str;
                            int trans_idx = 0;
                            //if (qa.mCurState == 9) num_trans_str = 0;
                            while (trans_idx < num_trans_str)
                            {
                                bool flag = qa.findMatchedBitmapFromKey2(trans_idx, mRecord + i -32, st_quotebit_mask, ed_quotebit_mask, colon_mask, no_bracketbit);
                                if (flag == true) {
                                    unsigned long temp_mask = qa.mStateMask.mask;
                                    long offset = (top_word) * 64 + __builtin_ctzll(temp_mask);
                                    // find the colon position for the next consecutive key field (from colonbit)
                                    // extract the current matched bit
                                    unsigned long matchbit = temp_mask & (-temp_mask);
                                    // remove the current matched bit and its prior bits from colon mask
                                    unsigned long match_mask = matchbit ^ (matchbit - 1);
                                    unsigned long tempbit = colonbit & (~match_mask);
                                    // process the matched output
                                    if (tempbit) {
                                    // if (state_type == OUTPUT_CANDIDATE) {
                                        long next_colon_pos = (top_word) * 64 + __builtin_ctzll(tempbit);
                                        long st = -1, ed = -1;
                                        findFieldQuotePos(next_colon_pos, st, ed);
                                  //  st = next_colon_pos;
                                        long text_length = st - offset - 1;
                                        //char* text = (char*)malloc(text_length + 1);
                                        memcpy(content, mRecord + offset + 1, text_length);
                                        //text[text_length] = '\0';
                                        // cout<<"text "<<text<<endl;
                                        output.append(content);
                                        //cout<<"text "<<text<<endl;
                                        //free(text);
                                        ++output_size;
                                    } else {
                                        // colon in state_mask.mask must be the last one
                                        last_colon_pos = offset;
                                        temp_state = qa.mStateMask.state;
                                    }
                                }
                                ++trans_idx;
                            }
                         } else if (qa.mCurState != UNMATCHED_STATE) {
                            last_wait = true;
                            prev_st_quotebit = st_quotebit;
                            prev_ed_quotebit = ed_quotebit;
                            prev_colonbit = colonbit;
                            //prev_v_first = v_text0;
                            //prev_v_second = v_text;
                        }
                        if (!colon_mask) {
                            unsigned long comma_mask = mask & commabit;
                            processCandidateArrayInterval(qa, top_word, comma_mask, last_comma_pos, skip_arr_ele);
                        }
                    }
                    if (cb_mask) {
                        first = second;
                        cb_mask = cb_mask & (cb_mask - 1);
                    } else {
                        first = 0;
                    }
                }
	    }
        }
    }
//    printf("syntax size %d query state %d %d\n", syntaxStackSize(&sa.syntax_stack), sa.query_state, sa.query_stack.top_item);
    printf("size of 2-tuple list before filtering %d\n", output_size);
    // if (mDepth == MAX_LEVEL) mDepth = max_positive_level;
    cout<<"cur level "<<cur_level<<" cnt "<<temp_cnt<<" stack size "<<qa.getStackSize()<<endl;
///    cout<<"skipped elements"<<skipped_arr_ele<<" "<<(697440 - skipped_arr_ele)<<endl;
    free(content);
    gettimeofday(&end,NULL);
    duration=1000000*(end.tv_sec-begin.tv_sec)+end.tv_usec-begin.tv_usec;
    double time = duration / (double) 1000000;
///    cout<<"execution time is "<<time<<endl;
//    delete qa;
}
