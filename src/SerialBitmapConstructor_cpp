#include "SerialBitmapConstructor.h"
#include <string.h>
#include <sys/time.h>
#include <sys/file.h>

SerialBitmap* SerialBitmapConstructor::construct(char* record, int depth, bool support_array) {
    struct timeval begin,end;
    double duration;
    SerialBitmap* bitmap = new SerialBitmap(record, depth, support_array);
    bitmap->setRecordLength(strlen(record));
    cout<<"record length "<<strlen(record)<<endl;
    gettimeofday(&begin,NULL);
    while(1)
        {
            gettimeofday(&end,NULL);
            duration=1000000*(end.tv_sec-begin.tv_sec)+end.tv_usec-begin.tv_usec;
            if(duration>3000000) break;
        }
    gettimeofday(&begin,NULL);
    bitmap->indexConstruction();
    gettimeofday(&end,NULL);
    duration=1000000*(end.tv_sec-begin.tv_sec)+end.tv_usec-begin.tv_usec;
    printf("The duration of index construction is %lf\n",duration/1000000);
    return bitmap;
}

SerialBitmap* SerialBitmapConstructor::constructMison(char* record, int depth, int num_step, bool support_array) {
    /*struct timeval begin,end;
    double duration;
    SerialBitmap* bitmap = new SerialBitmap(record, depth, support_array);
    bitmap->setRecordLength(strlen(record));
    gettimeofday(&begin,NULL);
    while(1)
        {
            gettimeofday(&end,NULL);
            duration=1000000*(end.tv_sec-begin.tv_sec)+end.tv_usec-begin.tv_usec;
            if(duration>3000000) break;
        }
    gettimeofday(&begin,NULL);
    bitmap->indexConstructionMison(num_step);
    gettimeofday(&end,NULL);
    duration=1000000*(end.tv_sec-begin.tv_sec)+end.tv_usec-begin.tv_usec;
    printf("The duration of structural index construction is %lf\n",duration/1000000);
    return bitmap;*/
    return NULL;
}

SerialBitmap* SerialBitmapConstructor::constructMisonPlus(char* record, int depth, int num_step, bool support_array) {
    /*struct timeval begin,end;
    double duration;
    SerialBitmap* bitmap = new SerialBitmap(record, depth, support_array);
    bitmap->setRecordLength(strlen(record));
    gettimeofday(&begin,NULL);
    while(1)
        {
            gettimeofday(&end,NULL);
            duration=1000000*(end.tv_sec-begin.tv_sec)+end.tv_usec-begin.tv_usec;
            if(duration>3000000) break;
        }
    gettimeofday(&begin,NULL);
    bitmap->indexConstructionMisonPlus(num_step);
    gettimeofday(&end,NULL);
    duration=1000000*(end.tv_sec-begin.tv_sec)+end.tv_usec-begin.tv_usec;
    printf("The duration of structural index construction is %lf\n",duration/1000000);
    return bitmap;*/
    return NULL;
}

SerialBitmap* SerialBitmapConstructor::constructSbSPison(char* record, int depth, int num_step, bool support_array) {
    /*struct timeval begin,end;
    double duration;
    SerialBitmap* bitmap = new SerialBitmap(record, depth, support_array);
    bitmap->setRecordLength(strlen(record));
    gettimeofday(&begin,NULL);
    while(1)
        {
            gettimeofday(&end,NULL);
            duration=1000000*(end.tv_sec-begin.tv_sec)+end.tv_usec-begin.tv_usec;
            if(duration>3000000) break;
        }
    gettimeofday(&begin,NULL);
    bitmap->indexConstructionSbSPison(num_step);
    gettimeofday(&end,NULL);
    duration=1000000*(end.tv_sec-begin.tv_sec)+end.tv_usec-begin.tv_usec;
    printf("The duration of index construction is %lf\n",duration/1000000);
    return bitmap;*/
    return NULL;
}

SerialBitmap* SerialBitmapConstructor::construct(Records* records, long rec_id, int depth, bool support_array) {
    char* record = records->text + records->rec_start_pos[rec_id];
    long length = records->rec_length[rec_id];
    SerialBitmap* bitmap = new SerialBitmap(record, depth, support_array);
    bitmap->setRecordLength(length);
//    struct timeval begin,end;
//    double duration;
//    gettimeofday(&begin,NULL);
    bitmap->indexConstruction();
//    gettimeofday(&end,NULL);
//    duration=1000000*(end.tv_sec-begin.tv_sec)+end.tv_usec-begin.tv_usec;
///    printf("The duration of index construction is %lf\n",duration/1000000);
    return bitmap;
}

SerialBitmap* SerialBitmapConstructor::constructMison(Records* records, long rec_id, int num_step, int depth, bool support_array) {
    /*char* record = records->text + records->rec_start_pos[rec_id];
    long length = records->rec_length[rec_id];
    SerialBitmap* bitmap = new SerialBitmap(record, depth, support_array);
    bitmap->setRecordLength(length);
    bitmap->indexConstructionMison(num_step);
    return bitmap;*/
}

SerialBitmap* SerialBitmapConstructor::constructMisonPlus(Records* records, long rec_id, int num_step, int depth, bool support_array) {
   /* char* record = records->text + records->rec_start_pos[rec_id];
    long length = records->rec_length[rec_id];
    SerialBitmap* bitmap = new SerialBitmap(record, depth, support_array);
    bitmap->setRecordLength(length);
    bitmap->indexConstructionMisonPlus(num_step);
    return bitmap;*/
}

SerialBitmap* SerialBitmapConstructor::constructSbSPison(Records* records, long rec_id, int num_step, int depth,  bool support_array) {
    /*char* record = records->text + records->rec_start_pos[rec_id];
    long length = records->rec_length[rec_id];
    SerialBitmap* bitmap = new SerialBitmap(record, depth, support_array);
    bitmap->setRecordLength(length);
    bitmap->indexConstructionSbSPison(num_step);
    return bitmap;*/
}
